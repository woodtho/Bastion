### FILE: ./bastionDescriptions.mjs 


/* bastionDescriptions.mjs
   A module for managing Bastion Descriptions & Bastion Quirks.
   - BASTION_DESCRIPTIONS: Array of 100 objects { roll, name, text }
   - BASTION_QUIRKS:       Array of 100 objects { roll, text }
   - getBastionDescriptionByRoll(num)
   - getRandomBastionDescription()
   - getBastionQuirkByRoll(num)
   - getRandomBastionQuirk()
   - addCustomDescription(descObj)
   - addCustomQuirk(quirkObj)
*/

// Full table of 100 Bastion Descriptions
export const BASTION_DESCRIPTIONS = [
  {
    roll: 1,
    name: "Crumbling Watchtower",
    text: "A crumbling watchtower atop a windswept cliff. Its winding staircase creaks ominously in the sea-borne winds."
  },
  {
    roll: 2,
    name: "Converted Windmill",
    text: "Found in a quiet valley, its sails long since broken. A family of ravens roosts in the rafters."
  },
  {
    roll: 3,
    name: "Submerged Lighthouse",
    text: "Partially sunk in a swamp, its beacon now fueled by bioluminescent moss."
  },
  {
    roll: 4,
    name: "Mushroom-Trunk Cottage",
    text: "A deserted cottage built into a colossal mushroom trunk. Faint glowing spores illuminate the interior at dusk."
  },
  {
    roll: 5,
    name: "Roadside Inn",
    text: "A once-thriving rest stop now deserted. Collapsed stables and a squeaky signboard hint at past revelries. The floor still bears scuff marks from countless dances."
  },
  {
    roll: 6,
    name: "Dwarven Brewery",
    text: "Tucked under a rocky hill, its fermentation vats toppled and crystal lanterns flickering faintly."
  },
  {
    roll: 7,
    name: "Treehouse Village",
    text: "A cluster of interlinked huts high among ancient oaks. Abandoned by wood elves centuries ago, now only rope bridges sway in the breeze."
  },
  {
    roll: 8,
    name: "Silent Watermill",
    text: "Along a quiet, slow-moving stream, the waterwheel is jammed with river weeds. The upstairs loft smells faintly of old bread and lavender."
  },
  {
    roll: 9,
    name: "Forgotten Chapel",
    text: "Dedicated to a forgotten goddess, with shattered stained-glass windows still hinting at old tales. Ivy creeps over broken pews as solemn hymns still echo within."
  },
  {
    roll: 10,
    name: "Canyon Fortress",
    text: "A hidden structure built right into the canyon wall with arrow slits repurposed by nesting birds."
  },
  {
    roll: 11,
    name: "Leaning Wizard’s Tower",
    text: "The tower stands precariously near the edge of a cliff just outside of an old city. Its floors are warped and burned by chaotic arcana."
  },
  {
    roll: 12,
    name: "Grand Townhouse",
    text: "An impressive home presides over an abandoned street. Faded murals line cracked walls and splintered balconies overlook the interior."
  },
  {
    roll: 13,
    name: "Abandoned Ballroom",
    text: "Once the jewel of opulent events, now broken chandeliers dangle dangerously, their crystals chiming in the cold breeze."
  },
  {
    roll: 14,
    name: "Barn Hideout",
    text: "A large, unassuming barn repurposed for shelter. Old haylofts serve as cramped bunkrooms as dust motes dance in morning sunbeams."
  },
  {
    roll: 15,
    name: "Seaside Boathouse",
    text: "Sitting on rotten and barnacled pilings, the boathouse remarkably remains. Fishing nets hang from rafters while weather-worn charts pinned to walls hint at past adventures."
  },
  {
    roll: 16,
    name: "Forgotten Guildhall",
    text: "An ancient hall once home to artisans, now claimed by various overgrowth. Torn fragments of banners and flags depict the lost pride of master craftspeople."
  },
  {
    roll: 17,
    name: "Barbarian Mead Hall",
    text: "A massive wooden lodge with carved pillars depicting heroic battles. Long tables scarred by feasts and brawls span the length of it."
  },
  {
    roll: 18,
    name: "Giant Tortoise Shell",
    text: "Deep in the jungle and hollowed out by tribes long gone, the shell’s natural dome forms a surprisingly sturdy roof."
  },
  {
    roll: 19,
    name: "Skyship Wreck",
    text: "The hull of a once-majestic sky vessel lies embedded in a grassy hill. Tattered sails have been repurposed into hammocks and faintly glowing runes light up the shattered helm."
  },
  {
    roll: 20,
    name: "Underground Bunker",
    text: "Concealed behind thick foliage on a wooded slope, rusting metal doors hide a small network of rooms that feature a defunct periscope offering a blurry glimpse of the outside world."
  },
  {
    roll: 21,
    name: "Driftwood Fort",
    text: "Perched on a remote beach and built from debris that washed ashore, these old crates stand in for walls and floor."
  },
  {
    roll: 22,
    name: "Gravekeeper’s Cottage",
    text: "A small dwelling near leaning headstones. Garden tools are strewn across the grounds and a rain barrel sits out back, tasting faintly of rosemary from the herb-laden soil."
  },
  {
    roll: 23,
    name: "Abandoned Granary",
    text: "On the edge of abandoned farmland, sacks of spoiled grain host rodents, while a lofted perch is ideal for watch duty."
  },
  {
    roll: 24,
    name: "Ruined Amphitheater",
    text: "Vines crawl over tiered stone seating, and a stage lies strewn with broken props. Even a whisper on one side of the structure carries hundreds of feet away."
  },
  {
    roll: 25,
    name: "Druid’s Earthen Lodge",
    text: "Within a hidden burrow, living roots shape the walls, moss carpets the floors, and glowing mushrooms provide soft illumination."
  },
  {
    roll: 26,
    name: "Sunken Merchant Ship",
    text: "Resting in a shallow reef, the lower decks of an old ship remain submerged while the upper deck is dried and patched. Bright reef fish dart past portholes where cargo once lay."
  },
  {
    roll: 27,
    name: "Old Spice Warehouse",
    text: "Nestled in a once-thriving port, the building’s wooden beams still carry traces of exotic aromas. Faded trade signs and rope pulleys hint at once bustling commerce."
  },
  {
    roll: 28,
    name: "Rundown Bell Tower",
    text: "Part of an old chapel or city gate, its tarnished bronze bell is cracked. Pigeons roost in the rafters, and the echo of ringing can occasionally be heard on stormy nights."
  },
  {
    roll: 29,
    name: "Collapsed Bridge House",
    text: "Perched above a rocky ravine, half of the bridge is gone. Some planks have been replaced by webs of rope, and a constant roar of rushing water echoes below."
  },
  {
    roll: 30,
    name: "Blacksmith’s Forge",
    text: "The anvil is silent, and iron slag lies scattered. The smell of burnt coal lingers."
  },
  {
    roll: 31,
    name: "Stone Bakery",
    text: "Built from sturdy clay bricks, a massive oven sits cold. Flour bins are now repurposed for storage, and the lingering scent of bread crust haunts the corners."
  },
  {
    roll: 32,
    name: "Goblin Trading Post",
    text: "A ramshackle collection of debris marks a seldom-used road. Torn bunting flutters in the breeze, and crude graffiti in Goblin-speech mark the walls with warnings and jokes."
  },
  {
    roll: 33,
    name: "Ruined Monastery",
    text: "Clinging to a cliff edge, the monastery’s prayer halls are open to the sky. Tattered flags flutter and the few remaining scrolls in a rack detail lost martial arts secrets."
  },
  {
    roll: 34,
    name: "Waterlogged Cavern",
    text: "Fungal lanterns glow gently upon the damp walls—pulsing in response to a constant drip that echoes through the hidden hollows."
  },
  {
    roll: 35,
    name: "Forester’s Lodge",
    text: "Carved animal masks line the walls, a lookout tower of woven branches stands nearby, and the building carries the scent of pine resin."
  },
  {
    roll: 36,
    name: "Collapsed Mineshaft",
    text: "An entrance propped open by rotting timbers, old rails end abruptly inside. The occasional sparkle of embedded ore twinkles in the light."
  },
  {
    roll: 37,
    name: "Fey Tea House",
    text: "Once a cozy hideaway for sprites, tiny mismatched chairs and chipped porcelain teapots decorate the inside of a brightly painted wooden structure."
  },
  {
    roll: 38,
    name: "Elven Greenhouse",
    text: "Cracks in glass domes allow in the overgrowth of vines and rare plants. Nearly unseen irrigation channels built into the architecture trickle faintly in the background."
  },
  {
    roll: 39,
    name: "Warrior’s Longhouse",
    text: "A rough-hewn hall scarred by innumerable sparring matches. Split timbers, battered shields, and a fire pit scorched into the central floor speak to its past battles."
  },
  {
    roll: 40,
    name: "Floating Platform",
    text: "Solid timbers are loosely lashed into a broad raft moored at a calm lake’s center. Makeshift huts stand atop the foundation, gently bobbing up and down."
  },
  {
    roll: 41,
    name: "Kobold Warren",
    text: "A small network of tunnels widened (with difficulty) for taller folk. Shiny trinkets adorn the walls—some carrying a dragon’s visage, others just shiny."
  },
  {
    roll: 42,
    name: "Lavish Summer Villa",
    text: "A splendid countryside estate with marble floors, ornate columns, and wide verandas. The place was gifted to an unknown heir, then forgotten, leaving peacocks and toads free roam."
  },
  {
    roll: 43,
    name: "Old Printing Press",
    text: "High ceilings support pulley systems for lifting crates of movable type. Inky footprints still stain the floor, and half-completed posters call for an uprising no one remembers."
  },
  {
    roll: 44,
    name: "Crab-Cage Hut",
    text: "Elevated on stilts in a brackish bay, this dwelling is pieced together from rusted iron cages. Seagulls squabble on the roof, and the tide sloshes beneath the holes in the floor."
  },
  {
    roll: 45,
    name: "Gargoyle-Roofed Townhouse",
    text: "Grim stone gargoyles loom from a steep roof in a quiet village. Cracked shutters and chipped mortar hint at once-great wealth, now long faded."
  },
  {
    roll: 46,
    name: "Thorned Chapel",
    text: "Hidden behind thick, tangled briars lies a mostly natural shelter. Stained-glass windows framed by branches depict a goddess of unknown origins."
  },
  {
    roll: 47,
    name: "Fallen Lord’s Estate",
    text: "A grandiose manor once owned by a corrupt aristocrat, now vacant since the lord was deposed. His taste was lavish, though his reputation was poor."
  },
  {
    roll: 48,
    name: "Mage’s Ivy-Shrouded Hut",
    text: "Twisting creepers cling to every board of this hut—seemingly holding it together. Alchemical glassware rattles in old cabinets and faint magical wards still spark with weak arcs of light."
  },
  {
    roll: 49,
    name: "Lumber Mill",
    text: "Abandoned when the saw jammed, sawdust piles have become nesting spots for woodland creatures. The massive circular blade stands idle, rusting by a clogged waterwheel."
  },
  {
    roll: 50,
    name: "Minotaur’s Maze-Lair",
    text: "A winding underground maze partially destroyed to form open rooms. Faded glyphs carved into stone walls display labyrinth guardians, and scattered bones have been swept aside."
  },
  {
    roll: 51,
    name: "Mountain Retreat",
    text: "Perched high on a scenic ridge, spacious balconies overlook rolling valleys. Polished hardwood floors, luxurious rugs, and ornate fireplaces reflect old wealth."
  },
  {
    roll: 52,
    name: "Water Pavilion",
    text: "Columns of polished stone stand amid a ruined estate. A magical fountain at the center seems endless, with water spilling over the marble floor."
  },
  {
    roll: 53,
    name: "Enlarged Caravan Wagon",
    text: "A fortune-teller’s wagon, now stationary, expanded into a cozy cabin. Velvet curtains are moth-eaten but still colorful, and half-dealt tarot decks lie scattered about."
  },
  {
    roll: 54,
    name: "Sunken Cellar",
    text: "Beneath a ruined mansion, stairs lead to damp stone rooms. Walls glow with faint red scribblings that are impossible to read, and a decaying family crest stands above a collapsed arch."
  },
  {
    roll: 55,
    name: "Circus Caravan Cluster",
    text: "Several bright wagons left to rot in a clearing. Torn posters announce daring acts, metal animal cages stand empty, and faded paint peels to reveal the bare wood."
  },
  {
    roll: 56,
    name: "Hollow Asteroid Keep",
    text: "A massive chunk of star-metal that fell from the sky, resting in a crater. Inside is a hollow core lined with glowing crystals and echoing cosmic winds."
  },
  {
    roll: 57,
    name: "Bog Witch’s Hut",
    text: "A shack raised on gnarly tree roots above a murky swamp. Jars of pickled oddities line countless shelves and patchwork quilts adorn every piece of furniture."
  },
  {
    roll: 58,
    name: "Inverted Gravity House",
    text: "A seemingly ordinary cottage hiding a gravitational anomaly. Once inside, “down” becomes “up”—furniture clings to the ceiling, and occupants must tread carefully."
  },
  {
    roll: 59,
    name: "Living Maze Tower",
    text: "This tower’s interior constantly reconfigures itself, twisting halls and revealing hidden doors. Stairways vanish and reappear, as though the architecture were alive."
  },
  {
    roll: 60,
    name: "Planar Rift Cottage",
    text: "A small stone home built over a minor tear in reality. Rooms occasionally flicker with visions of other planes, and ambient magical energy warps items stored here long-term."
  },
  {
    roll: 61,
    name: "Merchant’s Townhouse",
    text: "A stately home with ornate doors, faint perfume on velvet drapes, and hidden compartments that once saw clandestine trade deals."
  },
  {
    roll: 62,
    name: "Mirrored Sanctuary",
    text: "Walls, floors, and ceilings polished to a near-perfect shine. Reflections sometimes move on their own, offering cryptic counsel or warnings."
  },
  {
    roll: 63,
    name: "Crystal Cavern",
    text: "Glittering quartz and gemstone veins reflect torchlight. Occasional small tremors cause a soothing chime to echo through the crystals."
  },
  {
    roll: 64,
    name: "Ever-Bloom Grotto",
    text: "An underground chamber draped in continually blossoming flowers under a faint, otherworldly light. The flora shifts patterns and colors each sunrise."
  },
  {
    roll: 65,
    name: "Scorched Herbalist’s Hut",
    text: "Charred beams and ashen mortar show signs of a devastating fire. Amid the blackened shelves, a single sprout thrives defiantly, quickly growing enormous."
  },
  {
    roll: 66,
    name: "Shimmering Foam Palace",
    text: "A waterfront estate constructed from pearlescent shells and solidified sea foam. When moonlight hits, dazzling ripples spread across floors."
  },
  {
    roll: 67,
    name: "Submerged Stone Ruin",
    text: "Half submerged in a forest pond, water laps at the bas-relief carvings while aquatic plants grow thick inside."
  },
  {
    roll: 68,
    name: "Desolate Orchard Shed",
    text: "Apple trees twisted by neglect, with a shed whose walls bow under the branches. A broken cider press hints at its past livelihood."
  },
  {
    roll: 69,
    name: "Obsidian Volcano Spire",
    text: "A jagged tower of obsidian rising on the lip of an active volcano. Lava rivers flow below, and sulfurous fumes wreath the base."
  },
  {
    roll: 70,
    name: "Bleeding Manor",
    text: "A mansion whose wooden walls weep crimson sap, staining floors and walkways. The cause is unknown, rumored to be a malevolent spirit."
  },
  {
    roll: 71,
    name: "Giant Mushroom Ring",
    text: "Massive fungi grown in a perfect circle form a sheltered clearing. Soft bioluminescence glows, giving it a fairy-tale ambiance."
  },
  {
    roll: 72,
    name: "Desert Caravanserai",
    text: "Empty arched corridors once bustled with merchants. Sand piles drift in corners, half-buried mosaics recall wealthier times."
  },
  {
    roll: 73,
    name: "Boneyard Fortress",
    text: "Constructed from the bones of massive creatures, fused with necromantic magic. Whispers on the wind imply it’s partially sentient and hungry for more bones."
  },
  {
    roll: 74,
    name: "Vacant Basilica",
    text: "Towering columns and grand arches stand in hushed silence. Broken benches litter the floor, and sunlight filters through the vaulted ceiling."
  },
  {
    roll: 75,
    name: "Devil’s Maw Keep",
    text: "Resembling a wide stone mouth carved into a mountainside, the entrance is flanked by horned statues. Greenish flame flickers behind slit-like windows."
  },
  {
    roll: 76,
    name: "Sunken Bathhouse",
    text: "Once serviced by a hot spring that has dried up, a magical mist still clings to the air and keeps surfaces unnaturally clean."
  },
  {
    roll: 77,
    name: "Toy Maker’s Workshop",
    text: "The structure resembles a large music box. Paint flakes from whimsical decor, and squeaky floors remain the only audience to the box’s quiet tunes."
  },
  {
    roll: 78,
    name: "Wrecker’s Beacon Hut",
    text: "A tower built on a rocky shore cursed by constant storms. Lantern hooks hang from rafters, ropes left frayed, and the wind howls through broken shutters."
  },
  {
    roll: 79,
    name: "Alchemical Warehouse",
    text: "Once held exotic reagents, now shelves stand empty, stained with residue of potions. Broken flasks litter the floor amid faint aromas of sulfur and herbs."
  },
  {
    roll: 80,
    name: "Amphora Storehouse",
    text: "Carved into a hillside, rows of clay containers remain stacked in alcoves. The faint smell of old wine and oil lingers."
  },
  {
    roll: 81,
    name: "Plague-Touched Temple",
    text: "A once-holy site defiled by a spreading blight. Statues of divine figures stand defaced, stagnant pools bloom with toxic fungus."
  },
  {
    roll: 82,
    name: "Ranger’s Lookout Platform",
    text: "High in ancient pines, rope ladders and wooden platforms form a small nest. Exotic animals nest nearby, and a single whistle dangles from a hook."
  },
  {
    roll: 83,
    name: "Charred Iron Tower",
    text: "A scorched stronghold of twisted iron at the heart of a barren wasteland. Whatever unholy experiment happened here poisoned the land."
  },
  {
    roll: 84,
    name: "Mountaintop Shrine",
    text: "Exposed to bitter winds, prayer wheels line the perimeter, some jammed with ice. A central brazier gives warmth, flags snap in the gale."
  },
  {
    roll: 85,
    name: "Phantasmal Dome",
    text: "A crystalline hemisphere in a quiet clearing. Stepping through its walls reveals illusions of floating lights and chanting that never repeats the same way twice."
  },
  {
    roll: 86,
    name: "Lumina Fane",
    text: "A secluded shrine set in a hidden glade, ringed by glowing crystals that shine brightest under moonlight. Strange motes of light drift among the trees."
  },
  {
    roll: 87,
    name: "Mechanist’s Watchtower",
    text: "An austere tower of brass and iron in perfectly symmetrical gardens. Clockwork drones patrol halls lined with gears, all ticking in cosmic synchronization."
  },
  {
    roll: 88,
    name: "Starbound Birch Tower",
    text: "A gracefully winding tower grown from living birch trees. At night, star-shaped leaves glow with stored starlight, guiding travelers along spiral walkways."
  },
  {
    roll: 89,
    name: "Amberlight Villa",
    text: "An upscale manor encased in natural amber deposits, creating translucent, honey-hued walls. Evenings make the amber glow with soothing warmth."
  },
  {
    roll: 90,
    name: "Floating Chaos Forge",
    text: "A cluster of warped metal platforms bound by living strands of raw magic. Pools of molten slag bubble unpredictably, forging bizarre shapes that rise into the air."
  },
  {
    roll: 91,
    name: "Halfling Burrow",
    text: "A cozy halfling burrow enlarged for taller folk. Round door, warm hearth, and faint smell of fresh pies still cling to the cupboards."
  },
  {
    roll: 92,
    name: "Shattered Glass Observatory",
    text: "Missing its dome. Star charts are scattered, the telescope broken. Shards of colored glass crunch underfoot as moonlight pours in."
  },
  {
    roll: 93,
    name: "Shadowsworn Fortress",
    text: "A melancholic fortress shrouded in perpetual dusk. Surrounding marshland saps color. Low moans drift through half-flooded corridors."
  },
  {
    roll: 94,
    name: "Giant’s Pantry",
    text: "An abode within oversized cupboards carved by enormous hands. Massive clay jugs and a faint honey-and-grain scent waft through the old stores."
  },
  {
    roll: 95,
    name: "Whispering Cumulus Temple",
    text: "A sanctuary floating on a cloud chunk, anchored by a spiral staircase. Fog rolls through open archways, occasionally forming angelic or draconic shapes."
  },
  {
    roll: 96,
    name: "Desert Tent Encampment",
    text: "Sun-bleached canopies flow together into one giant tent. Poles lean in shifting sands, tattered rugs bearing patterns that were once bright with color."
  },
  {
    roll: 97,
    name: "Psionic Cascade Citadel",
    text: "A small castle of shifting halls where psychic storms flare, forging kaleidoscopic lights. Walls rearrange as if shaped by swirling astral energies."
  },
  {
    roll: 98,
    name: "Large Statue Interior",
    text: "A colossal stone figure with a secret hollowed chamber inside. A narrow stair leads into the head, where the eye sockets serve as windows."
  },
  {
    roll: 99,
    name: "Silver Strand Outpost",
    text: "A serene monastery woven from crystallized mental energy, partly transparent. Silver psionic threads form spectral banners that wave in ghostly fashion."
  },
  {
    roll: 100,
    name: "Bleak March Citadel",
    text: "A fortress built of stark metallic blocks that clank with every footstep. Armor lines echoing corridors, and a ceaseless distant battle drum lingers."
  }
];

// Full table of 100 Bastion Quirks
export const BASTION_QUIRKS = [
  { roll: 1, text: "Shadows move slightly at all times, as if cast by a flickering unseen light." },
  { roll: 2, text: "Chairs, tables, and shelves occasionally shuffle a few inches on their own." },
  { roll: 3, text: "Footsteps or spoken words echo longer than normal, granting an impression of grandeur." },
  { roll: 4, text: "Tiny glowing mushrooms or vines grow on walls, casting a soft, eerie glow." },
  { roll: 5, text: "An unseen force tidies the space at night, stacking objects neatly or sweeping floors." },
  { roll: 6, text: "At dusk, clouds of fireflies gather, lighting the property in flickering dance." },
  { roll: 7, text: "Some corners are ice-cold, while others are uncomfortably warm without explanation." },
  { roll: 8, text: "Hidden under peeling paint or moss, a mural depicts scenes of a lost civilization." },
  { roll: 9, text: "Doors swing shut and lock themselves if left unattended for too long." },
  { roll: 10, text: "Wind chimes or bells hidden in rafters make soft music when breezes pass." },
  { roll: 11, text: "A faint but distinct smell—lavender, brimstone, pine, or ozone—comes and goes unpredictably." },
  { roll: 12, text: "Pressing an ear to any wall reveals soft murmurs that can’t be clearly understood." },
  { roll: 13, text: "Strange symbols occasionally appear in corners or floors, glowing faintly before fading away." },
  { roll: 14, text: "Once a day, illusions of people or objects briefly appear then vanish." },
  { roll: 15, text: "Topiaries around the structure move slowly, rearranging themselves into new shapes each dawn." },
  { roll: 16, text: "A grandfather clock or device keeps perfect time, ticking eerily like a heartbeat." },
  { roll: 17, text: "A single window appears shattered but is locked in time, shards twisting and rattling in place." },
  { roll: 18, text: "Each evening, a lantern lights itself, then extinguishes at dawn." },
  { roll: 19, text: "Clocks, sundials, or hourglasses run fast, slow, or backward without reason." },
  { roll: 20, text: "Visitors hear distant laughter of children or revelers, though nobody is present." },
  { roll: 21, text: "Wind, water, or flames form a whispering voice in Sylvan or Primordial tongues." },
  { roll: 22, text: "One staircase leads to a door you can never reach—distance stretches indefinitely." },
  { roll: 23, text: "Existing portraits blink or shift expression when no one is looking." },
  { roll: 24, text: "A small patch of light always forms a rainbow on one wall or window, regardless of weather." },
  { roll: 25, text: "Occasional scrawlings predict minor future events before fading away." },
  { roll: 26, text: "A small torch or brazier burns without fuel, providing abnormally colored light." },
  { roll: 27, text: "Extreme gusts of wind rush through corridors at random intervals, though no open windows exist." },
  { roll: 28, text: "Surfaces have a faint tackiness, causing small items to cling a moment too long." },
  { roll: 29, text: "Muddy or dusty prints of unknown creatures appear then vanish soon after." },
  { roll: 30, text: "Cups, spoons, or forks rattle softly at random intervals, as if by ghostly diners." },
  { roll: 31, text: "Moss, mushrooms, or crystals grow upside-down from the ceiling." },
  { roll: 32, text: "Hair or fur stands on end in certain spots, hinting at latent magical energy." },
  { roll: 33, text: "One hears occasional knocks and flowing liquid in walls or floors, despite no plumbing." },
  { roll: 34, text: "One door whispers cryptic comments or jokes whenever opened or closed." },
  { roll: 35, text: "Loose floorboards shift, hinting at hidden compartments that relocate themselves." },
  { roll: 36, text: "Stonework or wallpaper subtly rearranges overnight, forming ephemeral faces or words." },
  { roll: 37, text: "One room (or courtyard) is always in a different season, sometimes raining or snowing indoors." },
  { roll: 38, text: "Subtle pastel shimmers appear, briefly tinting hair or clothes in rainbows." },
  { roll: 39, text: "Puddles or pools glow faintly at night, shimmering with unknown radiance." },
  { roll: 40, text: "Sometimes a door opens to an illusion of another faraway location before reverting to normal." },
  { roll: 41, text: "Metal objects hum softly when touched, resonating like distant chimes." },
  { roll: 42, text: "A tiny spiral of sparkling dust occasionally dances across rooms with high-pitched chimes." },
  { roll: 43, text: "A low-hanging mist seeps in at certain hours, making everything hazy for a short time." },
  { roll: 44, text: "Odd echoes of pickaxes or chanting come from below ground, even if no mine exists." },
  { roll: 45, text: "A broom or brush sweeps by itself at night, leaving bizarre patterns on dusty floors." },
  { roll: 46, text: "Tiled or mosaic floors shift subtly, forming abstract images that reset by morning." },
  { roll: 47, text: "A small statue or figurine changes pose each morning, sometimes appearing in odd places." },
  { roll: 48, text: "If cut away, ivy around the building regrows fully overnight, creeping further inside." },
  { roll: 49, text: "The distant clashing of swords or battle cries echoes through the halls at random times." },
  { roll: 50, text: "Doorframes sprout tiny blossoms that fall away when doors open, leaving a sweet aroma." },
  { roll: 51, text: "Candles never remain lit for long, blowing out as if by an invisible breath." },
  { roll: 52, text: "Stepping on certain floor spots creates musical notes, forming a tune if walked in sequence." },
  { roll: 53, text: "Water droplets turn into jittering quartz-like crystals upon hitting the floor, dissolving hours later." },
  { roll: 54, text: "Mirrors reflect details or individuals not present, like glimpses of parallel realities." },
  { roll: 55, text: "Stones near the entrance rearrange themselves at dawn, spelling cryptic patterns or words." },
  { roll: 56, text: "Anything said within these walls may be repeated back in an eerie whisper hours later." },
  { roll: 57, text: "Faint floating calligraphy appears, depicting cryptic phrases in unknown languages." },
  { roll: 58, text: "Flowers near the bastion have mirrorlike petals that dazzle under sunlight or moonlight." },
  { roll: 59, text: "A fountain or water source murmurs gentle, half-formed words to anyone who listens closely." },
  { roll: 60, text: "Dust in sunbeams forms shapes resembling animals or humanoids before dispersing." },
  { roll: 61, text: "Touching certain walls triggers echoes of past conversations or laughter." },
  { roll: 62, text: "Thin veins of light trace floors or beams at night, pulsing gently like a heartbeat." },
  { roll: 63, text: "Sparkles drift down in moonlight, as though stardust gently falling from the sky." },
  { roll: 64, text: "Decor magically morphs each day, as though celebrating an obscure holiday." },
  { roll: 65, text: "Walls gently expand and contract at times, as though the building itself is breathing." },
  { roll: 66, text: "During lightning storms or meteor showers, runes briefly shimmer on glass surfaces." },
  { roll: 67, text: "A friendly ghost is sometimes seen humming or tidying, vanishing when spotted." },
  { roll: 68, text: "A sprite-like creature lives here, occasionally pranking residents with harmless tricks." },
  { roll: 69, text: "Tiny glowing crystals embed themselves in cracks, shifting color by mood or presence." },
  { roll: 70, text: "Gears or clockwork spin aimlessly without a power source, quietly ticking in corners." },
  { roll: 71, text: "Translucent vines or flowers appear on walls at night, fading by sunrise." },
  { roll: 72, text: "Silvery web strands appear in corners, nearly impossible to remove, glimmering faintly." },
  { roll: 73, text: "Ethereal birdlike shapes visit each morning, singing songs that sound reversed." },
  { roll: 74, text: "Smoke in the chimney forms moving silhouettes, retelling overheard stories in sequence." },
  { roll: 75, text: "Ash in the fireplace never diminishes, resetting every dawn as though the fire never dies." },
  { roll: 76, text: "A distant string instrument or flute plays a melancholic tune with no visible musician." },
  { roll: 77, text: "Placing a hand on certain walls leaves a glowing imprint that lingers about a minute." },
  { roll: 78, text: "In dim light, a fast-moving person leaves a trailing afterimage for a moment." },
  { roll: 79, text: "Crossing the main entrance at dawn or dusk resonates a soft, bell-like chord." },
  { roll: 80, text: "Curtains or rugs change color overnight, as if rewoven by unseen dreamers." },
  { roll: 81, text: "A small fountain or stream flows backward or upward, defying normal gravity." },
  { roll: 82, text: "Moonlight through certain windows is unnaturally cold, forming frost inside." },
  { roll: 83, text: "White feathers occasionally float by, dissolving into motes of light upon landing." },
  { roll: 84, text: "Walls ripple gently when someone daydreams, returning to normal upon waking." },
  { roll: 85, text: "Tiny sparks of light arise from the floor at dusk, giving it a flickering aura." },
  { roll: 86, text: "Exactly one hour after midnight, a faint bell rings three times, though no bell exists." },
  { roll: 87, text: "Puddles reflect a starry sky or other strange scenery even during daylight hours." },
  { roll: 88, text: "Unusually large, colorful moths gather around lamps, vanishing by morning." },
  { roll: 89, text: "Carved knockers on doors occasionally greet visitors or demand passwords that don’t exist." },
  { roll: 90, text: "Breezes around corners hum old music box tunes, hauntingly sweet and slightly off-key." },
  { roll: 91, text: "Certain spots cause all noise to vanish, as though stepping into a vacuum of silence." },
  { roll: 92, text: "A shimmering, star-filled portal briefly appears on walls or floors, then fades without opening." },
  { roll: 93, text: "When multiple people breathe in unison, a soft harmonic hum resonates through the building." },
  { roll: 94, text: "Figures or patterns in stained glass shift posture slightly between viewings." },
  { roll: 95, text: "Plants inside subtly turn to face passing creatures, as though observing them." },
  { roll: 96, text: "Any hearty laugh is echoed back by a faint second wave of mirth from above." },
  { roll: 97, text: "Surfaces shimmer at certain angles, as though coated with dew or crystals." },
  { roll: 98, text: "A single bell-like tone resonates each sunrise, lingering for several seconds." },
  { roll: 99, text: "At night, ceilings show faint star patterns drifting slowly, mirroring unknown constellations." },
  { roll: 100, text: "A separate courtyard hosts spectral flowers that wilt in daylight." }
];

/* 
   Retrieve a Bastion Description by exact roll (1..100).
   If the number is out of range or not found, returns undefined.
*/
export function getBastionDescriptionByRoll(num) {
  return BASTION_DESCRIPTIONS.find(entry => entry.roll === num);
}

/* 
   Retrieve a random Bastion Description from the 1..100 list.
*/
export function getRandomBastionDescription() {
  const index = Math.floor(Math.random() * BASTION_DESCRIPTIONS.length);
  return BASTION_DESCRIPTIONS[index];
}

/* 
   Retrieve a Bastion Quirk by exact roll (1..100).
*/
export function getBastionQuirkByRoll(num) {
  return BASTION_QUIRKS.find(entry => entry.roll === num);
}

/* 
   Retrieve a random Bastion Quirk from the 1..100 list.
*/
export function getRandomBastionQuirk() {
  const index = Math.floor(Math.random() * BASTION_QUIRKS.length);
  return BASTION_QUIRKS[index];
}

/* 
   Allow user-defined additions to the BASTION_DESCRIPTIONS array.
   Provide a { roll, name, text } object or any format you prefer.
*/
export function addCustomDescription(descObj) {
  BASTION_DESCRIPTIONS.push(descObj);
}

/* 
   Allow user-defined additions to the BASTION_QUIRKS array.
   Provide a { roll, text } object or any format you prefer.
*/
export function addCustomQuirk(quirkObj) {
  BASTION_QUIRKS.push(quirkObj);
}
### FILE: ./facilities/basic/basicFacilitiesIndex.mjs 


// Gathers the basic facility definitions into one array
import { Bedroom } from "./Bedroom.mjs";
import { Courtyard } from "./Courtyard.mjs";
import { DiningRoom } from "./DiningRoom.mjs";
import { Kitchen } from "./Kitchen.mjs";
import { Parlor } from "./Parlor.mjs";
import { Storage } from "./Storage.mjs";


export const BASIC_FACILITIES_DEFINITIONS = [
  Bedroom,
  Courtyard,
  DiningRoom,
  Kitchen,
  Parlor,
  Storage,
];
### FILE: ./facilities/basic/Bedroom.mjs 


export const Bedroom = {
  facilityType: "Bedroom",
  description: "A cozy bedroom that can house inhabitants, offering a comfortable place to sleep.",
};
### FILE: ./facilities/basic/Courtyard.mjs 


export const Courtyard = {
  facilityType: "Courtyard",
  description: "An open-air space for gatherings, training, or relaxation within the Bastion grounds.",
};
### FILE: ./facilities/basic/DiningRoom.mjs 


export const DiningRoom = {
  facilityType: "Dining Room",
  description: "A place where multiple people can share meals, used for feasts and gatherings.",
};
### FILE: ./facilities/basic/Kitchen.mjs 


export const Kitchen = {
  facilityType: "Kitchen",
  description: "A specialized area for preparing meals, improving morale or hosting feasts.",
};
### FILE: ./facilities/basic/Parlor.mjs 


export const Parlor = {
  facilityType: "Parlor",
  description: "A comfortable sitting room for conversation or entertaining guests.",
};
### FILE: ./facilities/basic/Storage.mjs 


export const Storage = {
  facilityType: "Storage",
  description: "A secure area to store goods, supplies, or other items. Basic but essential.",
};
### FILE: ./facilities/special/ArcaneStudy.mjs 


// FILE: ./facilities/ArcaneStudy.mjs

/*
An Arcane Study is a place of quiet research containing desks and bookshelves.
Default Space is Roomy. 
Prerequisite: Ability to use an Arcane Focus or tool as a Spellcasting Focus.
*/

export const ArcaneStudy = {
  name: "Arcane Study",
  levelReq: 5,
  prereq: "Ability to use an Arcane Focus or tool as a Spellcasting Focus",
  canEnlarge: false, // No mention of enlarging in the description
  defaultSpace: "Roomy",
  baseOrderOptions: ["Craft"], // This facility offers the Craft order
  desc: `
    <h2>Arcane Study (Level 5)</h2>
    <p><strong>Prerequisite:</strong> Ability to use an Arcane Focus or tool as a Spellcasting Focus</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Craft (Arcane Focus, Book, or Magic Item [Arcana])</p>
    <p>
      An Arcane Study is a place of quiet research that contains one or more desks and bookshelves.
    </p>
    <p>
      <strong>Arcane Study Charm.</strong> After spending a Long Rest in your Bastion, gain a magical Charm that lets you cast <em>Identify</em> without a spell slot or Material components (lasts 7 days or until used). You can't gain this Charm again while you still have it.
    </p>
    <p>
      <strong>Craft Options.</strong> When issuing the Craft order here:
      <ul>
        <li><strong>Arcane Focus.</strong> Commission the facility’s hireling to craft an Arcane Focus (7 days, no cost).</li>
        <li><strong>Book.</strong> Commission the facility’s hireling to craft a blank book (7 days, costs 10 GP).</li>
        <li><strong>Magic Item (Arcana).</strong> If you are level 9+, commission a Common or Uncommon magic item from the Arcana tables in chapter 7. See “Crafting Magic Items” for time/cost.</li>
      </ul>
    </p>
  `,
  subOrders: {
    Craft: [
      { label: "Arcane Focus", key: "ArcaneStudyFocus" },
      { label: "Book", key: "ArcaneStudyBook" },
      { label: "Magic Item (Arcana)", key: "ArcaneStudyMagicItem" }
    ],
  }
  // No randomEffects because no random tables or dice are mentioned for Arcane Study
};
### FILE: ./facilities/special/Archive.mjs 


// FILE: ./facilities/Archive.mjs

/*
An Archive is a repository of valuable books, maps, and scrolls.
Default Space is Roomy, can enlarge to Vast for 2,000 GP.
Prerequisite: None.
*/

export const Archive = {
  name: "Archive",
  levelReq: 13,
  prereq: "None",
  canEnlarge: true, // Can enlarge from Roomy->Vast
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 2000
  },
  baseOrderOptions: ["Research"], // This facility offers the Research order
  desc: `
    <h2>Archive (Level 13)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Default Space:</strong> Roomy (can enlarge to Vast for 2,000 GP)</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Research (Helpful Lore)</p>
    <p>
      An Archive is a repository of valuable books, maps, and scrolls. Usually attached to a Library behind a locked or secret door.
    </p>
    <p>
      <strong>Research: Helpful Lore.</strong> Commission the facility’s hireling to search the Archive for lore over 7 days. The hireling gains knowledge as if they cast <em>Legend Lore</em>, then shares it with you.
    </p>
    <p>
      <strong>Reference Book.</strong> Your Archive contains one copy of a rare reference book, providing a benefit when you Study in the Bastion. 
      Options include:
      <ul>
        <li><em>Bigby’s Handy Arcana Codex</em> (Advantage on Intelligence (Arcana) checks)</li>
        <li><em>The Chronepsis Chronicles</em> (Advantage on Intelligence (History) checks)</li>
        <li><em>Investigations of the Inquisitive</em> (Advantage on Intelligence (Investigation) checks)</li>
        <li><em>Material Musings on the Nature of the World</em> (Advantage on Intelligence (Nature) checks)</li>
        <li><em>The Old Faith and Other Religions</em> (Advantage on Intelligence (Religion) checks)</li>
      </ul>
      If enlarged to Vast, you gain two additional reference books.
    </p>
  `,
  subOrders: {
    Research: [
      { label: "Helpful Lore", key: "ArchiveHelpfulLore" }
    ],
  }
  // No randomEffects because no random tables or dice are mentioned for Archive
};
### FILE: ./facilities/special/Armory.mjs 


// FILE: ./facilities/Armory.mjs

/*
An Armory contains mannequins for displaying armor, hooks for Shields, racks for weapons, and chests for ammunition.
Default Space is Roomy. 
Prerequisite: None.
*/

export const Armory = {
  name: "Armory",
  levelReq: 5,
  prereq: "None",
  canEnlarge: false, // No enlarge cost mentioned
  defaultSpace: "Roomy",
  baseOrderOptions: ["Trade"], // This facility offers the Trade order
  desc: `
    <h2>Armory (Level 5)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Trade (Stock Armory)</p>
    <p>
      Contains mannequins for armor, hooks for Shields, racks for weapons, and chests for ammunition.
    </p>
    <p>
      <strong>Trade: Stock Armory.</strong> Commission the hireling to stock the Armory in 7 days. Costs 100 GP plus 100 GP per Bastion Defender. If your Bastion has a Smithy, total cost is halved.
    </p>
    <p>
      While stocked, your Bastion Defenders are harder to kill during Bastion Events. Roll 1d8 instead of 1d6 when determining casualties. After the event, the Armory is depleted.
    </p>
  `,
  subOrders: {
    Trade: [
      { label: "Stock Armory", key: "ArmoryStockArmory" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Armory
};
### FILE: ./facilities/special/Aviary.mjs 


// FILE: ./facilities/special/Aviary.mjs

/*
An Aviary typically has a large birdcage near a desk of writing supplies.
Default space is Cramped. It can enlarge from Cramped to Roomy for 1,000 GP.
Includes a random companion helper function.
*/

export const Aviary = {
  name: "Aviary",
  levelReq: 5,
  prereq: "None",
  canEnlarge: true,
  // The default space if not specified on creation
  defaultSpace: "Cramped",
  // Aviary can only enlarge from Cramped->Roomy for 1,000 GP
  enlargeCosts: {
    "Cramped->Roomy": 1000
  },
  baseOrderOptions: ["Recruit"],
  desc: `
    <h2>Aviary (Level 5)</h2>
    <p><strong>Default Space:</strong> Cramped (can enlarge to Roomy for 1,000 GP)</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Recruit (train a flying creature)</p>
    <p>
      This facility lets you send and receive messages by winged creatures (Raven/Owl/Hawk).
      When enlarged, you can train stronger fliers (Imp/Quasit/Sphinx) that can carry ≤ 20 lbs.
    </p>
    <ul>
      <li><strong>Recruit: Avian Friend.</strong> 7 days to train. Only one active Avian Friend at a time.</li>
      <li>You can issue "Aerial Orders" via the Avian Friend as if you were at the Aviary.</li>
    </ul>
  `,
  subOrders: {
    Recruit: [
      { label: "Train Basic Avian (Raven/Owl/Hawk)", key: "AviaryBasicAvianFriend" },
      { label: "Train Advanced Avian (Imp/Quasit/Sphinx)", key: "AviaryAdvancedAvianFriend" }
    ],
  },
  // If there's a random effect (like picking a random avian to train),
  // we can define a "randomEffects" section. Example:
  randomEffects: [
    {
      label: "Random Avian Companion",
      functionName: "getRandomAvianCompanion"
    }
  ]
};

/*
Helper function to pick a random flying companion. 
If isRoomy=false => picks from Raven/Owl/Hawk
If isRoomy=true  => also can pick Imp, Quasit, Sphinx
*/
export function getRandomAvianCompanion(isRoomy = false) {
  const basic = ["Raven", "Owl", "Hawk"];
  const advanced = ["Imp", "Quasit", "Sphinx of Wonder"];
  if (!isRoomy) {
    const i = Math.floor(Math.random() * basic.length);
    return basic[i];
  } else {
    const combined = basic.concat(advanced);
    const i = Math.floor(Math.random() * combined.length);
    return combined[i];
  }
}
### FILE: ./facilities/special/Barrack.mjs 


// FILE: ./facilities/Barrack.mjs

/*
A Barrack serves as sleeping quarters for Bastion Defenders.
Default Space is Roomy, can enlarge to Vast for 2,000 GP.
Prerequisite: None.
*/

export const Barrack = {
  name: "Barrack",
  levelReq: 5,
  prereq: "None",
  canEnlarge: true, // Can enlarge from Roomy->Vast
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 2000
  },
  baseOrderOptions: ["Recruit"], // This facility offers the Recruit order
  desc: `
    <h2>Barrack (Level 5)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Default Space:</strong> Roomy (can enlarge to Vast for 2,000 GP)</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Recruit (Bastion Defenders)</p>
    <p>
      A Bastion can have more than one Barrack, each housing up to twelve Bastion Defenders.
    </p>
    <p>
      <strong>Recruit: Bastion Defenders.</strong> Recruit up to four Defenders in 7 days. No monetary cost. Can't issue Recruit if Barrack is full.
    </p>
    <p>
      Track Defenders per Barrack. If you lose any, deduct them from your roster. You can assign names/personalities as desired.
    </p>
  `,
  subOrders: {
    Recruit: [
      { label: "Bastion Defenders", key: "BarrackBastionDefenders" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Barrack
};
### FILE: ./facilities/special/Demiplane.mjs 


// FILE: ./facilities/Demiplane.mjs

/*
A Demiplane is an extradimensional space accessible by a special door in another facility.
Default Space is Vast.
Prerequisite: Ability to use an Arcane Focus or tool as a Spellcasting Focus.
*/

export const Demiplane = {
  name: "Demiplane",
  levelReq: 17,
  prereq: "Ability to use an Arcane Focus or a tool as a Spellcasting Focus",
  canEnlarge: false, // It's already Vast
  defaultSpace: "Vast",
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Demiplane (Level 17)</h2>
    <p><strong>Prerequisite:</strong> Ability to use an Arcane Focus or a tool as a Spellcasting Focus</p>
    <p><strong>Space:</strong> Vast</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Empower (Arcane Resilience)</p>
    <p>
      A special door appears in one of your other facilities. Only you and your hirelings can open it, leading to an extradimensional Demiplane. Neither the Demiplane nor its door can be dispelled.
    </p>
    <p>
      <strong>Empower: Arcane Resilience.</strong> Commission runes on the walls that last 7 days, granting you Temporary Hit Points equal to 5 × your level after a Long Rest in the Demiplane.
    </p>
    <p>
      <strong>Fabrication.</strong> While in the Demiplane, you can take a Magic action to create a nonmagical object (max 5 ft in any dimension, worth ≤ 5 GP) from nothing once per Long Rest.
    </p>
  `,
  subOrders: {
    Empower: [
      { label: "Arcane Resilience", key: "DemiplaneArcaneResilience" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Demiplane
};
### FILE: ./facilities/special/Dungeon.mjs 


// FILE: ./facilities/special/Dungeon.mjs

/*
A Dungeon has 3 rooms if Roomy, or 5 if Vast. 
You can bait up to 5,000 GP (Roomy) or 10,000 GP (Vast), then roll vs. DC=15.
If success, you gain loot; if fail, you lose your gold.
*/

export const Dungeon = {
  name: "Dungeon",
  levelReq: 13,
  prereq: "None",
  canEnlarge: true,
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 10000
  },
  baseOrderOptions: ["Trade"],
  desc: `
    <h2>Dungeon (Level 13)</h2>
    <p><strong>Default Space:</strong> Roomy (3 rooms). Can enlarge to Vast (5 rooms) for 10,000 GP.</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Trade -> Bait Dungeon</p>
    <p>
      DC=15 minus any mods from Trapworks, Menagerie, or Prison. 
      Bait up to 5,000 GP if Roomy, 10,000 GP if Vast. 
      After 7 days, roll a d20 vs. DC:
    </p>
    <ul>
      <li><strong>Nat 20 or success by 5+:</strong> keep gold + gain 100% more loot</li>
      <li><strong>Success:</strong> keep gold + gain 50% more loot</li>
      <li><strong>Fail:</strong> lose bait</li>
      <li><strong>Nat 1 or fail by 5+:</strong> lose bait + any DC-reducing creatures are slain</li>
    </ul>
  `,
  subOrders: {
    Trade: [
      { label: "Bait Dungeon (7 days)", key: "DungeonBait" },
    ],
  },
  randomEffects: [
    {
      label: "Simulate Dungeon Outcome",
      functionName: "rollDungeonOutcome"
    }
  ]
};

/*
Helper to roll a d20 vs. a Dungeon DC.
We return an object with the roll, successMargin, isNat1, isNat20 for the main code to interpret.
*/
export function rollDungeonOutcome(dungeonDC) {
  const outcomeRoll = Math.floor(Math.random() * 20) + 1;
  return {
    roll: outcomeRoll,
    successMargin: outcomeRoll - dungeonDC,
    isNat1: (outcomeRoll === 1),
    isNat20: (outcomeRoll === 20),
  };
}
### FILE: ./facilities/special/GamingHall.mjs 


// FILE: ./facilities/GamingHall.mjs

/*
A Gaming Hall provides recreational activities such as chess, darts, cards, or dice.
Default Space is Vast.
Prerequisite: None.
*/

export const GamingHall = {
  name: "Gaming Hall",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Vast",
  baseOrderOptions: ["Trade"], // This facility offers the Trade order
  desc: `
    <h2>Gaming Hall (Level 9)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Vast</p>
    <p><strong>Hirelings:</strong> 4</p>
    <p><strong>Order:</strong> Trade (Gambling Hall)</p>
    <p>
      Offers recreational activities. When you issue the Trade order, it becomes a gambling den for 7 days.
    </p>
    <p>
      <strong>Trade: Gambling Hall.</strong> At the end of 7 days, roll 1d100 for your winnings:
      <ul>
        <li>01–50: 1d6 × 10 GP</li>
        <li>51–85: 2d6 × 10 GP</li>
        <li>86–95: 4d6 × 10 GP</li>
        <li>96–00: 10d6 × 10 GP</li>
      </ul>
    </p>
  `,
  subOrders: {
    Trade: [
      { label: "Gambling Hall", key: "GamingHallGamblingHall" }
    ]
  },
  // Use a randomEffects function to roll 1d100 and determine winnings
  randomEffects: [
    {
      label: "Roll Gambling Hall Winnings",
      functionName: "rollGamingHallWinnings"
    }
  ]
};

/*
Roll 1d100 and return the appropriate winnings range.
*/
export function rollGamingHallWinnings() {
  const roll = Math.floor(Math.random() * 100) + 1; // 1-100
  let result;
  if (roll <= 50) {
    // 1d6 × 10 GP
    const d6 = Math.floor(Math.random() * 6) + 1;
    result = d6 * 10;
  } else if (roll <= 85) {
    // 2d6 × 10 GP
    const d6a = Math.floor(Math.random() * 6) + 1;
    const d6b = Math.floor(Math.random() * 6) + 1;
    result = (d6a + d6b) * 10;
  } else if (roll <= 95) {
    // 4d6 × 10 GP
    const dice = Array.from({ length: 4 }, () => Math.floor(Math.random() * 6) + 1);
    const sum = dice.reduce((a, b) => a + b, 0);
    result = sum * 10;
  } else {
    // 10d6 × 10 GP
    const dice = Array.from({ length: 10 }, () => Math.floor(Math.random() * 6) + 1);
    const sum = dice.reduce((a, b) => a + b, 0);
    result = sum * 10;
  }
  return result; // Return the GP amount
}
### FILE: ./facilities/special/Garden.mjs 


// FILE: ./facilities/Garden.mjs

/*
A Garden can produce decorative flowers, food, herbs, or poisons.
Default Space is Roomy, can enlarge to Vast for 2,000 GP.
Prerequisite: None.
*/

export const Garden = {
  name: "Garden",
  levelReq: 5,
  prereq: "None",
  canEnlarge: true, // Can enlarge from Roomy->Vast
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 2000
  },
  baseOrderOptions: ["Harvest"], // This facility offers the Harvest order
  desc: `
    <h2>Garden (Level 5)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Default Space:</strong> Roomy (can enlarge to Vast for 2,000 GP)</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Harvest (Garden Growth)</p>
    <p>
      A Bastion can have multiple Gardens. Each Garden is of a specific type: Decorative, Food, Herb, or Poison.
    </p>
    <p>
      Changing the Garden type takes 21 days of work (during which no other activity occurs here).
    </p>
    <p>
      <strong>Harvest: Garden Growth.</strong> Commission the hireling to collect items over 7 days. No cost.
    </p>
    <table>
      <thead>
        <tr><th>Garden Type</th><th>Description</th><th>Harvest</th></tr>
      </thead>
      <tbody>
        <tr><td>Decorative</td><td>Flowers and topiaries</td><td>Ten exquisite bouquets (5 GP each), or ten vials of Perfume, or ten Candles</td></tr>
        <tr><td>Food</td><td>Mushrooms or vegetables</td><td>100 days' worth of Rations</td></tr>
        <tr><td>Herb</td><td>Rare herbs</td><td>Herbs to create ten Healer's Kits or one Potion of Healing</td></tr>
        <tr><td>Poison</td><td>Plants/fungi for toxins</td><td>Ingredients for two Antitoxin vials or one Basic Poison vial</td></tr>
      </tbody>
    </table>
    <p>
      If enlarged to Vast, it counts as two Gardens (each with its own type).
    </p>
  `,
  subOrders: {
    Harvest: [
      { label: "Garden Growth", key: "GardenGrowth" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Garden
};
### FILE: ./facilities/special/Greenhouse.mjs 


// FILE: ./facilities/Greenhouse.mjs

/*
A Greenhouse is an enclosure for rare plants and fungi, includes a magical fruit-bearing plant.
Default Space is Roomy.
Prerequisite: None.
*/

export const Greenhouse = {
  name: "Greenhouse",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Harvest"], // This facility offers the Harvest order
  desc: `
    <h2>Greenhouse (Level 9)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Harvest (Healing Herbs or Poison)</p>
    <p>
      A Greenhouse has a controlled climate for rare plants/fungi.
    </p>
    <p>
      <strong>Fruit of Restoration.</strong> One plant has three magical fruits that grant the effect of <em>Lesser Restoration</em> if eaten within 24 hours of picking. They regrow daily.
    </p>
    <p>
      <strong>Harvest Options.</strong>
      <ul>
        <li><strong>Healing Herbs.</strong> Craft a Potion of Healing (greater) in 7 days at no cost.</li>
        <li><strong>Poison.</strong> Extract one application of Assassin’s Blood, Malice, Pale Tincture, or Truth Serum in 7 days at no cost.</li>
      </ul>
    </p>
  `,
  subOrders: {
    Harvest: [
      { label: "Healing Herbs", key: "GreenhouseHealingHerbs" },
      { label: "Poison", key: "GreenhousePoison" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Greenhouse
};
### FILE: ./facilities/special/Guildhall.mjs 


// FILE: ./facilities/Guildhall.mjs

/*
A Guildhall comes with a guild (you are the guild master) of about fifty members.
Default Space is Vast.
Prerequisite: Expertise in a skill.
*/

export const Guildhall = {
  name: "Guildhall",
  levelReq: 17,
  prereq: "Expertise in a skill",
  canEnlarge: false,
  defaultSpace: "Vast",
  baseOrderOptions: ["Recruit"], // This facility offers the Recruit order
  desc: `
    <h2>Guildhall (Level 17)</h2>
    <p><strong>Prerequisite:</strong> Expertise in a skill</p>
    <p><strong>Space:</strong> Vast</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Recruit (Guild Assignment)</p>
    <p>
      A Guildhall is a meeting space for roughly fifty skilled guild members who live and work nearby. You are the guild master.
    </p>
    <p>
      <strong>Recruit: Guild Assignment.</strong> Commission the hireling to recruit guild members for a special assignment. Types of guilds include:
      <ul>
        <li>Adventurers’ Guild (hunt down a Beast of CR 2 or lower in 1d6+1 days)</li>
        <li>Bakers’ Guild (create baked goods for 500 GP or a favor)</li>
        <li>Brewers’ Guild (deliver barrels of ale)</li>
        <li>Masons’ Guild (add a defensive wall for free)</li>
        <li>Shipbuilders’ Guild (build a vehicle from the PHB’s vehicles list)</li>
        <li>Thieves’ Guild (steal a nonmagical object of up to 5 ft dimension)</li>
      </ul>
      With DM’s permission, create new assignments.
    </p>
  `,
  subOrders: {
    Recruit: [
      { label: "Guild Assignment", key: "GuildhallAssignment" }
    ]
  },
  // A function for the Adventurers’ Guild hunt duration (1d6 + 1 days):
  randomEffects: [
    {
      label: "Adventurers’ Guild Hunt Duration",
      functionName: "getAdventurersGuildHuntDays"
    }
  ]
};

/*
Helper function for Adventurers’ Guild assignment.
*/
export function getAdventurersGuildHuntDays() {
  // Returns 1d6 + 1
  const roll = Math.floor(Math.random() * 6) + 1;
  return roll + 1;
}
### FILE: ./facilities/special/Inn.mjs 


// FILE: ./facilities/special/Inn.mjs

/*
An Inn is always Vast. It removes extra exhaustion on a Long Rest, 
and "Empower -> Well Rested" for a 1-hour Long Rest if you remain for 7 days.
*/

export const Inn = {
  name: "Inn",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Vast", // No enlargement
  // No enlargeCosts since it cannot be enlarged
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Inn (Level 9)</h2>
    <p><strong>Default Space:</strong> Vast (cannot enlarge further)</p>
    <p><strong>Hirelings:</strong> 2</p>
    <p><strong>Order:</strong> Empower -> Well Rested</p>
    <ul>
      <li><strong>Sweet Dreams.</strong> Remove an extra exhaustion on any Long Rest here, 
          and become aware of curses affecting you.</li>
      <li><strong>Well Rested (7 days).</strong> If you remain for 7 days, your next Long Rest 
          only takes 1 hour.</li>
    </ul>
  `,
  subOrders: {
    Empower: [
      { label: "Well Rested (7 days)", key: "InnWellRested" },
    ],
  },
  // Example: no randomEffects
  randomEffects: []
};
### FILE: ./facilities/special/Laboratory.mjs 


// FILE: ./facilities/Laboratory.mjs

/*
A Laboratory for alchemical supplies and crafting various concoctions.
Default Space is Roomy.
Prerequisite: None.
*/

export const Laboratory = {
  name: "Laboratory",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Craft"],
  desc: `
    <h2>Laboratory (Level 9)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Craft (Alchemist’s Supplies or Poison)</p>
    <p>
      A Laboratory contains storage for alchemical supplies and workspaces for creating potions and poisons.
    </p>
    <p>
      <strong>Craft Options.</strong>
      <ul>
        <li><strong>Alchemist’s Supplies.</strong> The hireling crafts anything possible with Alchemist’s Supplies (PHB & chapter 7 rules).</li>
        <li><strong>Poison.</strong> Commission the hireling to craft certain poisons (Burnt Othur Fumes, Essence of Ether, Torpor) in 7 days at half cost.</li>
      </ul>
    </p>
  `,
  subOrders: {
    Craft: [
      { label: "Alchemist’s Supplies", key: "LaboratoryAlchemistSupplies" },
      { label: "Poison", key: "LaboratoryPoison" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Laboratory
};
### FILE: ./facilities/special/Library.mjs 


// FILE: ./facilities/Library.mjs

/*
A Library contains a collection of books, plus desks and reading chairs.
Default Space is Roomy.
Prerequisite: None.
*/

export const Library = {
  name: "Library",
  levelReq: 5,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Research"],
  desc: `
    <h2>Library (Level 5)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Research (Topical Lore)</p>
    <p>
      This Library contains a collection of books plus desks and reading chairs.
    </p>
    <p>
      <strong>Research: Topical Lore.</strong> Commission the hireling to research a specific topic for 7 days, discovering up to three new pieces of information about it.
    </p>
  `,
  subOrders: {
    Research: [
      { label: "Topical Lore", key: "LibraryTopicalLore" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Library
};
### FILE: ./facilities/special/MeditationChamber.mjs 


// FILE: ./facilities/MeditationChamber.mjs

/*
A Meditation Chamber is a relaxing space that aligns mind, body, and spirit.
Default Space is Cramped.
Prerequisite: None.
*/

export const MeditationChamber = {
  name: "Meditation Chamber",
  levelReq: 13,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Cramped",
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Meditation Chamber (Level 13)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Cramped</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Empower (Inner Peace)</p>
    <p>
      A small chamber that helps align mind, body, and spirit.
    </p>
    <p>
      <strong>Empower: Inner Peace.</strong> Commission the hirelings to use the chamber for 7 days. The next time you roll for a Bastion event, roll twice and choose the result.
    </p>
    <p>
      <strong>Fortify Self.</strong> Meditate here for 7 uninterrupted days. At the end, gain Advantage on two random saving throw types for the next 7 days, determined by rolling on a 1d6 table (reroll duplicates).
    </p>
  `,
  subOrders: {
    Empower: [
      { label: "Inner Peace", key: "MeditationChamberInnerPeace" }
    ]
  },
  // Use randomEffects to determine which saving throws you get for Fortify Self
  randomEffects: [
    {
      label: "Random Fortify Saving Throws",
      functionName: "getRandomFortifySaves"
    }
  ]
};

/*
Helper function for random saving throw advantage from a 1d6 table:
1-Strength, 2-Dex, 3-Con, 4-Int, 5-Wis, 6-Cha
Returns an array of two distinct saving throw labels.
*/
export function getRandomFortifySaves() {
  const saves = ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"];
  // Roll twice, ensuring distinct results
  const roll1 = Math.floor(Math.random() * 6);
  let roll2 = Math.floor(Math.random() * 6);
  while (roll2 === roll1) {
    roll2 = Math.floor(Math.random() * 6);
  }
  return [saves[roll1], saves[roll2]];
}
### FILE: ./facilities/special/Menagerie.mjs 


// FILE: ./facilities/Menagerie.mjs

/*
A Menagerie has enclosures for up to four Large creatures. 
Default Space is Vast.
Prerequisite: None.
*/

export const Menagerie = {
  name: "Menagerie",
  levelReq: 13,
  prereq: "None",
  canEnlarge: false, // Already Vast
  defaultSpace: "Vast",
  baseOrderOptions: ["Recruit"],
  desc: `
    <h2>Menagerie (Level 13)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Vast</p>
    <p><strong>Hirelings:</strong> 2</p>
    <p><strong>Order:</strong> Recruit (Creature)</p>
    <p>
      A Menagerie contains large enclosures for up to four Large creatures (or more smaller ones). Creatures here count as Bastion Defenders unless you choose otherwise.
    </p>
    <p>
      <strong>Recruit: Creature.</strong> Commission the hirelings to add a creature (cost and time vary based on CR). The hirelings look after it.
    </p>
    <table>
      <thead>
        <tr><th>Creature</th><th>Size</th><th>Cost</th></tr>
      </thead>
      <tbody>
        <tr><td>Ape</td><td>Medium</td><td>500 GP</td></tr>
        <tr><td>Black Bear</td><td>Medium</td><td>500 GP</td></tr>
        <tr><td>Brown Bear</td><td>Large</td><td>1,000 GP</td></tr>
        <tr><td>Constrictor Snake</td><td>Large</td><td>250 GP</td></tr>
        <tr><td>Crocodile</td><td>Large</td><td>500 GP</td></tr>
        <tr><td>Dire Wolf</td><td>Large</td><td>1,000 GP</td></tr>
        <tr><td>Giant Vulture</td><td>Large</td><td>1,000 GP</td></tr>
        <tr><td>Hyena</td><td>Medium</td><td>50 GP</td></tr>
        <tr><td>Jackal</td><td>Small</td><td>50 GP</td></tr>
        <tr><td>Lion</td><td>Large</td><td>1,000 GP</td></tr>
        <tr><td>Owlbear</td><td>Large</td><td>3,500 GP</td></tr>
        <tr><td>Panther</td><td>Medium</td><td>250 GP</td></tr>
        <tr><td>Tiger</td><td>Large</td><td>1,000 GP</td></tr>
      </tbody>
    </table>
    <p>
      With DM consent, other creatures can be added. See cost table by CR. Typically only Beasts and some Monstrosities are allowed.
    </p>
  `,
  subOrders: {
    Recruit: [
      { label: "Creature", key: "MenagerieCreature" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Menagerie
};
### FILE: ./facilities/special/Mine.mjs 


// FILE: ./facilities/special/Mine.mjs

/*
A Mine is a Vast facility that yields random gems or magic items after 7 days.
*/

export const Mine = {
  name: "Mine",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Vast",
  baseOrderOptions: ["Harvest"],
  desc: `
    <h2>Mine (Level 9)</h2>
    <p><strong>Default Space:</strong> Vast</p>
    <p><strong>Hirelings:</strong> 2</p>
    <p><strong>Order:</strong> Harvest -> Dig a Hole</p>
    <p>After 7 days, roll a d100 using the DMG's "Gemstones" or "Arcana" tables.</p>
  `,
  subOrders: {
    Harvest: [
      { label: "Dig a Hole (7 days)", key: "MineDigHole" },
    ],
  },
  // We'll store one random effect function for demonstration
  randomEffects: [
    {
      label: "Roll Mine Treasure (d100)",
      functionName: "rollMineTreasure"
    }
  ]
};

/*
Helper to roll a d100 for random Mine treasure.
*/
export function rollMineTreasure() {
  return Math.floor(Math.random() * 100) + 1;
}
### FILE: ./facilities/special/MobileBastionEngine.mjs 


// FILE: ./facilities/special/MobileBastionEngine.mjs

/*
A Mobile Bastion Engine can move your Bastion at a slow pace for 2 days 
(Roomy). If enlarged to Vast for 60,000 GP, it can fly for up to 5 days.
Also includes a table for random treasure (01-41, 42-73, etc.)
*/

export const MobileBastionEngine = {
  name: "Mobile Bastion Engine",
  levelReq: 13,
  prereq: "None",
  canEnlarge: true,
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 60000
  },
  baseOrderOptions: ["Move"],
  desc: `
    <h2>Mobile Bastion Engine (Level 13)</h2>
    <p><strong>Default Space:</strong> Roomy (can enlarge to Vast for 60,000 GP)</p>
    <p><strong>Hirelings:</strong> 2</p>
    <p><strong>Order:</strong> Move -> Relocate Bastion</p>
    <p>
      Allows your Bastion to relocate. If Roomy, you can only move it for 2 days 
      before resting. If Vast, you can fly up to 5 days. Not landing in time causes a crash
      that damages a random special facility for 1 turn.
    </p>
    <h3>D100 Treasure Table</h3>
    <table border="1" style="border-collapse: collapse;">
      <tr><th>01–41</th><td>3× 50 GP Gems + 5× 10 GP Gems</td></tr>
      <tr><th>42–73</th><td>3× 100 GP Gems + 2× 50 GP Gems</td></tr>
      <tr><th>74–95</th><td>1× 500 GP Gem</td></tr>
      <tr><th>96–00</th><td>1× Uncommon Magic Item</td></tr>
    </table>
  `,
  subOrders: {
    Move: [
      { label: "Relocate Bastion (2 days or 5 days if flying)", key: "MobileEngineRelocate" }
    ],
  },
  randomEffects: [
    {
      label: "Roll Engine Treasure (d100)",
      functionName: "rollEngineTreasureTable"
    }
  ]
};

/*
Helper function to roll on the D100 Treasure table above.
*/
export function rollEngineTreasureTable() {
  const rollVal = Math.floor(Math.random() * 100) + 1;
  let result;
  if (rollVal <= 41) {
    result = "3× 50 GP gems, 5× 10 GP gems";
  } else if (rollVal <= 73) {
    result = "3× 100 GP gems, 2× 50 GP gems";
  } else if (rollVal <= 95) {
    result = "1× 500 GP gem";
  } else {
    result = "1× Uncommon Magic Item (Arcana Table)";
  }
  return { roll: rollVal, treasure: result };
}
### FILE: ./facilities/special/Observatory.mjs 


// FILE: ./facilities/Observatory.mjs

/*
An Observatory sits atop your Bastion with a telescope aimed at the night sky.
Default Space is Roomy.
Prerequisite: Ability to use a Spellcasting Focus.
*/

export const Observatory = {
  name: "Observatory",
  levelReq: 13,
  prereq: "Ability to use a Spellcasting Focus",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Observatory (Level 13)</h2>
    <p><strong>Prerequisite:</strong> Ability to use a Spellcasting Focus</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Empower (Eldritch Discovery)</p>
    <p>
      Peer into Wildspace and the Astral Plane. After a Long Rest here, gain a Charm that allows one casting of <em>Contact Other Plane</em>.
    </p>
    <p>
      <strong>Empower: Eldritch Discovery.</strong> Spend 7 nights exploring eldritch mysteries. At the end, roll a die:
      <ul>
        <li>If even, nothing happens.</li>
        <li>If odd, gain one of these Charms: Charm of Darkvision, Charm of Heroism, or Charm of Vitality.</li>
      </ul>
    </p>
  `,
  subOrders: {
    Empower: [
      { label: "Eldritch Discovery", key: "ObservatoryEldritchDiscovery" }
    ]
  },
  // Random effect for the odd/even roll
  randomEffects: [
    {
      label: "Odd/Even Eldritch Discovery",
      functionName: "getObservatoryDiscovery"
    }
  ]
};

/*
Helper function for Eldritch Discovery (odd vs. even roll).
*/
export function getObservatoryDiscovery() {
  const roll = Math.floor(Math.random() * 6) + 1; // 1-6 roll
  // Return whether it's odd or even and a possible charm
  if (roll % 2 === 0) {
    return { result: "No effect", roll };
  } else {
    // Odd: Gain one random charm from the 3
    const charms = ["Charm of Darkvision", "Charm of Heroism", "Charm of Vitality"];
    const idx = Math.floor(Math.random() * charms.length);
    return { result: `Gained ${charms[idx]}`, roll };
  }
}
### FILE: ./facilities/special/Portentorium.mjs 


// FILE: ./facilities/special/Portentorium.mjs

/*
A Portentorium grants a once-per-7-days charm for Augury. 
Empower -> Fate's Favor yields Heroic Inspiration to you and a number of allies.
*/

export const Portentorium = {
  name: "Portentorium",
  levelReq: 5,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Portentorium (Level 5)</h2>
    <p><strong>Default Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Empower -> Fate's Favor</p>
    <ul>
      <li><strong>Destiny’s Decision.</strong> After a Long Rest here, gain a 7-day charm to cast
      <em>Augury</em> once without a slot. You cannot get this charm again if you still have it.</li>
      <li><strong>Fate’s Favor (7 days):</strong> The hireling’s ritual grants Heroic Inspiration to you
      and up to your proficiency bonus in allies.</li>
    </ul>
  `,
  subOrders: {
    Empower: [
      { label: "Fate’s Favor", key: "PortentoriumFatesFavor" },
    ],
  },
  randomEffects: []
};
### FILE: ./facilities/special/Prison.mjs 


// FILE: ./facilities/special/Prison.mjs

/*
A Prison (Roomy) has 2 cells, each can hold 2 Medium or 1 Large creature.
Research -> Interrogation or Rehabilitation, after a prisoner fails an escape attempt.
*/

export const Prison = {
  name: "Prison",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Research"],
  desc: `
    <h2>Prison (Level 9)</h2>
    <p><strong>Default Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Research -> Interrogation or Rehabilitation</p>
    <p>
      Includes 2 cells (2 Medium or 1 Large each). The prisoner makes an escape check
      vs. DC = your Bastion Defenders + extras from Armory, Trapworks, or walls.
      If they fail, choose Interrogation (truth serum) or Rehabilitation (possibly turning
      them into a Bastion Defender).
    </p>
  `,
  subOrders: {
    Research: [
      { label: "Interrogation", key: "PrisonInterrogation" },
      { label: "Rehabilitation", key: "PrisonRehabilitation" }
    ],
  },
  randomEffects: []
};

/*
Helper function for the main code to compute Prison escape DC. 
DC = defenders + (armoryStocked ? defenders : 0) + (trapworks ? 5 : 0) + (wall ? 5 : 0)
*/
export function calculatePrisonEscapeDC(baseDefenders, isArmoryStocked, hasTrapworks, hasWall) {
  let dc = baseDefenders;
  if (isArmoryStocked) {
    // +1 per defender
    dc += baseDefenders;
  }
  if (hasTrapworks) {
    dc += 5;
  }
  if (hasWall) {
    dc += 5;
  }
  return dc;
}
### FILE: ./facilities/special/Pub.mjs 


// FILE: ./facilities/Pub.mjs

/*
A Pub is where people come to socialize. It might be a bar, coffee shop, or tea room.
Default Space is Roomy, can enlarge to Vast for 2,000 GP.
Prerequisite: None.
*/

export const Pub = {
  name: "Pub",
  levelReq: 13,
  prereq: "None",
  canEnlarge: true, // Can enlarge from Roomy->Vast
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 2000
  },
  baseOrderOptions: ["Research"],
  desc: `
    <h2>Pub (Level 13)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Default Space:</strong> Roomy (can enlarge to Vast for 2,000 GP)</p>
    <p><strong>Hirelings:</strong> 1 (bartender)</p>
    <p><strong>Order:</strong> Research (Information Gathering)</p>
    <p>
      A Pub provides beverages and a place to gather. The bartender maintains a spy network.
    </p>
    <p>
      <strong>Research: Information Gathering.</strong> Commission the bartender to gather info for 7 days. They can reveal the location of a familiar creature within 50 miles, unless it’s hidden by magic or otherwise inaccessible.
    </p>
    <p>
      <strong>Pub Special.</strong> One magical beverage on tap (can be changed at the start of a Bastion turn). Options include:
      <ul>
        <li><em>Bigby’s Burden</em> (enlarge effect for 24 hours)</li>
        <li><em>Kiss of the Spider Queen</em> (<em>Spider Climb</em> for 24 hours)</li>
        <li><em>Moonlight Serenade</em> (gain or extend <em>Darkvision</em> for 24 hours)</li>
        <li><em>Positive Reinforcement</em> (Resistance to Necrotic damage for 24 hours)</li>
        <li><em>Sterner Stuff</em> (auto-succeed on saves vs. <em>Frightened</em> for 24 hours)</li>
      </ul>
      Enlarging the Pub lets you have two magical beverages on tap simultaneously and adds three more hirelings (servers).
    </p>
  `,
  subOrders: {
    Research: [
      { label: "Information Gathering", key: "PubInformationGathering" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Pub
};
### FILE: ./facilities/special/Reliquary.mjs 


// FILE: ./facilities/Reliquary.mjs

/*
A Reliquary is a vault that holds sacred objects.
Default Space is Cramped.
Prerequisite: Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus.
*/

export const Reliquary = {
  name: "Reliquary",
  levelReq: 13,
  prereq: "Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus",
  canEnlarge: false,
  defaultSpace: "Cramped",
  baseOrderOptions: ["Harvest"],
  desc: `
    <h2>Reliquary (Level 13)</h2>
    <p><strong>Prerequisite:</strong> Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus</p>
    <p><strong>Space:</strong> Cramped</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Harvest (Talisman)</p>
    <p>
      A vault of sacred objects. After a Long Rest here, you gain a Charm that allows one casting of <em>Greater Restoration</em>.
    </p>
    <p>
      <strong>Harvest: Talisman.</strong> Commission the hireling to produce a talisman over 7 days at no cost. This talisman can replace costly spell components (up to 1,000 GP) once without being consumed.
    </p>
  `,
  subOrders: {
    Harvest: [
      { label: "Talisman", key: "ReliquaryTalisman" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Reliquary
};
### FILE: ./facilities/special/Sacristy.mjs 


// FILE: ./facilities/Sacristy.mjs

/*
A Sacristy stores sacred items and religious vestments.
Default Space is Roomy.
Prerequisite: Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus.
*/

export const Sacristy = {
  name: "Sacristy",
  levelReq: 9,
  prereq: "Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Craft"],
  desc: `
    <h2>Sacristy (Level 9)</h2>
    <p><strong>Prerequisite:</strong> Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Craft (Holy Water or Magic Item [Relic])</p>
    <p>
      A Sacristy stores sacred items. You can regain one expended spell slot (level 5 or lower) after a Short Rest here, once per Long Rest.
    </p>
    <p>
      <strong>Craft Options.</strong>
      <ul>
        <li><strong>Holy Water.</strong> 7 days to craft a flask at no cost. You can spend up to 500 GP for increased damage (+1d8 per 100 GP).</li>
        <li><strong>Magic Item (Relic).</strong> If you are level 9+, craft a Common or Uncommon magic item from the Relics tables in chapter 7 (time/cost per “Crafting Magic Items”).</li>
      </ul>
    </p>
  `,
  subOrders: {
    Craft: [
      { label: "Holy Water", key: "SacristyHolyWater" },
      { label: "Magic Item (Relic)", key: "SacristyMagicItem" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Sacristy
};
### FILE: ./facilities/special/Sanctuary.mjs 


// FILE: ./facilities/Sanctuary.mjs

/*
A Sanctuary displays icons of your religion and provides a quiet place for worship.
Default Space is Roomy.
Prerequisite: Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus.
*/

export const Sanctuary = {
  name: "Sanctuary",
  levelReq: 5,
  prereq: "Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Craft"],
  desc: `
    <h2>Sanctuary (Level 5)</h2>
    <p><strong>Prerequisite:</strong> Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Craft (Sacred Focus)</p>
    <p>
      After a Long Rest here, you gain a Charm that allows one casting of <em>Healing Word</em>.
    </p>
    <p>
      <strong>Craft: Sacred Focus.</strong> Commission the hireling to craft a Druidic Focus or Holy Symbol in 7 days at no cost.
    </p>
  `,
  subOrders: {
    Craft: [
      { label: "Sacred Focus", key: "SanctuarySacredFocus" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Sanctuary
};
### FILE: ./facilities/special/Sanctum.mjs 


// FILE: ./facilities/Sanctum.mjs

/*
A Sanctum is a place of solace and healing.
Default Space is Roomy.
Prerequisite: Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus.
*/

export const Sanctum = {
  name: "Sanctum",
  levelReq: 17,
  prereq: "Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Sanctum (Level 17)</h2>
    <p><strong>Prerequisite:</strong> Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 4</p>
    <p><strong>Order:</strong> Empower (Fortifying Rites)</p>
    <p>
      After a Long Rest here, you gain a Charm that allows one casting of <em>Heal</em>.
    </p>
    <p>
      <strong>Empower: Fortifying Rites.</strong> Perform daily rites for 7 days, granting a named beneficiary Temporary Hit Points = your level after each Long Rest. 
      Also, you always have <em>Word of Recall</em> prepared and can designate the Sanctum as its destination. One creature arriving via this spell can benefit from a <em>Heal</em> spell.
    </p>
  `,
  subOrders: {
    Empower: [
      { label: "Fortifying Rites", key: "SanctumFortifyingRites" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Sanctum
};
### FILE: ./facilities/special/Scriptorium.mjs 


// FILE: ./facilities/Scriptorium.mjs

/*
A Scriptorium contains desks and writing supplies.
Default Space is Roomy.
Prerequisite: None.
*/

export const Scriptorium = {
  name: "Scriptorium",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Craft"],
  desc: `
    <h2>Scriptorium (Level 9)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Craft (Book Replica, Spell Scroll, or Paperwork)</p>
    <p>
      A Scriptorium has desks and supplies for scribing or copying text.
    </p>
    <p>
      <strong>Craft Options.</strong>
      <ul>
        <li><strong>Book Replica.</strong> Copy a nonmagical book in 7 days (needs a blank book).</li>
        <li><strong>Spell Scroll.</strong> Scribe one Cleric or Wizard spell (level 3 or lower). Pay scribing time/cost.</li>
        <li><strong>Paperwork.</strong> Create up to fifty copies of a single-page document in 7 days (1 GP each), optionally distribute within 50 miles.</li>
      </ul>
    </p>
  `,
  subOrders: {
    Craft: [
      { label: "Book Replica", key: "ScriptoriumBookReplica" },
      { label: "Spell Scroll", key: "ScriptoriumSpellScroll" },
      { label: "Paperwork", key: "ScriptoriumPaperwork" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Scriptorium
};
### FILE: ./facilities/special/ScryingChamber.mjs 


// FILE: ./facilities/special/ScryingChamber.mjs

/*
A Scrying Chamber is a dark room with a crystal ball. 
'Research -> Eye Open' (7 days) uses Scrying (DC 13) daily.
*/

export const ScryingChamber = {
  name: "ScryingChamber",
  levelReq: 9,
  prereq: "ArcaneFocusOrDruidicFocusOrHolySymbol",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Research"],
  desc: `
    <h2>Scrying Chamber (Level 9)</h2>
    <p><strong>Default Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Research -> Eye Open</p>
    <p>
      <strong>Eye Closed:</strong> No Divination spells or scry sensors can affect those inside.
      <strong>Eye Open:</strong> The hireling casts Scrying (DC 13) each day for 7 days 
      and reports the findings.
    </p>
  `,
  subOrders: {
    Research: [
      { label: "Eye Open (7 days)", key: "ScryingChamberEyeOpen" },
    ],
  },
  randomEffects: []
};
### FILE: ./facilities/special/Smithy.mjs 


// FILE: ./facilities/Smithy.mjs

/*
A Smithy has a forge, an anvil, and needed tools to craft weapons, armor, or other equipment.
Default Space is Roomy.
Prerequisite: None.
*/

export const Smithy = {
  name: "Smithy",
  levelReq: 5,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Craft"],
  desc: `
    <h2>Smithy (Level 5)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 2</p>
    <p><strong>Order:</strong> Craft (Smith's Tools, Magic Item [Armament])</p>
    <p>
      A Smithy contains a forge, an anvil, and other tools for weapon/armor crafting.
    </p>
    <p>
      <strong>Craft Options.</strong>
      <ul>
        <li><strong>Smith’s Tools.</strong> Craft anything possible with Smith’s Tools (PHB rules).</li>
        <li><strong>Magic Item (Armament).</strong> If level 9+, craft a Common or Uncommon magic item from the Armaments tables in chapter 7 (see “Crafting Magic Items”).</li>
      </ul>
    </p>
  `,
  subOrders: {
    Craft: [
      { label: "Smith’s Tools", key: "SmithySmithsTools" },
      { label: "Magic Item (Armament)", key: "SmithyMagicItem" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Smithy
};
### FILE: ./facilities/special/specialFacilitiesIndex.mjs 


import { ArcaneStudy } from "./ArcaneStudy.mjs";
import { Archive } from "./Archive.mjs";
import { Armory } from "./Armory.mjs";
import { Aviary } from "./Aviary.mjs";
import { Barrack } from "./Barrack.mjs";
import { Demiplane } from "./Demiplane.mjs";
import { Dungeon } from "./Dungeon.mjs";
import { GamingHall } from "./GamingHall.mjs";
import { Garden } from "./Garden.mjs";
import { Greenhouse } from "./Greenhouse.mjs";
import { Guildhall } from "./Guildhall.mjs";
import { Inn } from "./Inn.mjs";
import { Laboratory } from "./Laboratory.mjs";
import { Library } from "./Library.mjs";
import { MeditationChamber } from "./MeditationChamber.mjs";
import { Menagerie } from "./Menagerie.mjs";
import { Mine } from "./Mine.mjs";
import { MobileBastionEngine } from "./MobileBastionEngine.mjs";
import { Observatory } from "./Observatory.mjs";
import { Portentorium } from "./Portentorium.mjs";
import { Prison } from "./Prison.mjs";
import { Pub } from "./Pub.mjs";
import { Reliquary } from "./Reliquary.mjs";
import { Sacristy } from "./Sacristy.mjs";
import { Sanctuary } from "./Sanctuary.mjs";
import { Sanctum } from "./Sanctum.mjs";
import { Scriptorium } from "./Scriptorium.mjs";
import { ScryingChamber } from "./ScryingChamber.mjs";
import { Smithy } from "./Smithy.mjs";
import { Stable } from "./Stable.mjs";
import { Storehouse } from "./Storehouse.mjs";
import { TeleportationCircle } from "./TeleportationCircle.mjs";
import { Temple } from "./Temple.mjs";
import { Theater } from "./Theater.mjs";
import { TrainingArea } from "./TrainingArea.mjs";
import { Trapworks } from "./Trapworks.mjs";
import { TrophyRoom } from "./TrophyRoom.mjs";
import { WarlordsHonorHall } from "./WarlordsHonorHall.mjs";
import { WarRoom } from "./WarRoom.mjs";
import { Workshop } from "./Workshop.mjs";



// This array holds ALL special facility definitions, integrated in full:
  export const SPECIAL_FACILITIES_FULL = [
   ArcaneStudy,
    Archive,
    Armory,
    Aviary,
    Barrack,
    Demiplane,
    Dungeon,
    GamingHall,
    Garden,
    Greenhouse,
    Guildhall,
    Inn,
    Laboratory,
    Library,
    MeditationChamber,
    Menagerie,
    Mine,
    MobileBastionEngine,
    Observatory,
    Portentorium,
    Prison,
    Pub,
    Reliquary,
    Sacristy,
    Sanctuary,
    Sanctum,
    Scriptorium,
    ScryingChamber,
    Smithy,
    Stable,
    Storehouse,
    TeleportationCircle,
    Temple,
    Theater,
    TrainingArea,
    Trapworks,
    TrophyRoom,
    WarlordsHonorHall,
    WarRoom,
    Workshop
  ];
  
### FILE: ./facilities/special/Stable.mjs 


// FILE: ./facilities/Stable.mjs

/*
A Stable houses mounts or pack animals. 
Default Space is Roomy, can enlarge to Vast for 2,000 GP.
Prerequisite: None.
*/

export const Stable = {
  name: "Stable",
  levelReq: 9,
  prereq: "None",
  canEnlarge: true, // Roomy->Vast
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 2000
  },
  baseOrderOptions: ["Trade"],
  desc: `
    <h2>Stable (Level 9)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Default Space:</strong> Roomy (can enlarge to Vast for 2,000 GP)</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Trade (Animals)</p>
    <p>
      Each Stable comes with certain mounts (Riding Horse or Camel, plus Ponies/Mules). The hireling cares for them. If a Beast stays for 14 days here, you gain Advantage on Animal Handling checks regarding it.
    </p>
    <p>
      <strong>Trade: Animals.</strong> Commission the hireling to buy or sell mounts over 7 days. You pay normal cost for purchases; selling yields higher-than-standard prices (increasing with your level).
    </p>
  `,
  subOrders: {
    Trade: [
      { label: "Animals", key: "StableAnimals" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Stable
};
### FILE: ./facilities/special/Storehouse.mjs 


// FILE: ./facilities/Storehouse.mjs

/*
A Storehouse is a cool, dark space for storing trade goods and other nonmagical items.
Default Space is Roomy.
Prerequisite: None.
*/

export const Storehouse = {
  name: "Storehouse",
  levelReq: 5,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Trade"],
  desc: `
    <h2>Storehouse (Level 5)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Trade (Goods)</p>
    <p>
      A Storehouse contains nonmagical trade goods. You can buy or sell up to 500 GP worth of goods in 7 days (increases at level 9 & 13).
    </p>
    <p>
      <strong>Trade: Goods.</strong> Commission the hireling to purchase or sell items. Buying costs normal price, selling yields a markup that increases with your level.
    </p>
  `,
  subOrders: {
    Trade: [
      { label: "Goods", key: "StorehouseGoods" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Storehouse
};
### FILE: ./facilities/special/TeleportationCircle.mjs 


// FILE: ./facilities/TeleportationCircle.mjs

/*
  A Teleportation Circle is a permanent circle (from the spell) inscribed on the floor.
Default Space is Roomy.
Prerequisite: None.
*/
  
  export const TeleportationCircle = {
    name: "Teleportation Circle",
    levelReq: 9,
    prereq: "None",
    canEnlarge: false,
    defaultSpace: "Roomy",
    baseOrderOptions: ["Recruit"],
    desc: `
    <h2>Teleportation Circle (Level 9)</h2>
      <p><strong>Prerequisite:</strong> None</p>
      <p><strong>Space:</strong> Roomy</p>
      <p><strong>Hirelings:</strong> 1</p>
      <p><strong>Order:</strong> Recruit (Spellcaster)</p>
      <p>
      A permanent <em>Teleportation Circle</em> is inscribed on the floor. You can invite a Friendly NPC spellcaster to arrive. 
    </p>
      <p>
      <strong>Recruit: Spellcaster.</strong> Roll any die:
      <ul>
      <li>Odd: The invitee declines.</li>
      <li>Even: They accept and stay for up to 14 days or until they cast a spell for you.</li>
      </ul>
      Spell level up to 4, or up to 8 if you're level 17+. You must pay for any costly material components.
    </p>
  `,
  subOrders: {
    Recruit: [
      { label: "Spellcaster", key: "TeleportationCircleSpellcaster" }
    ]
  },
  // Random effect for odd/even acceptance
  randomEffects: [
    {
      label: "Spellcaster Invitation Roll",
      functionName: "rollTeleportationInvitation"
    }
  ]
};

/*
Helper function for rolling an odd/even acceptance.
*/
export function rollTeleportationInvitation() {
  const roll = Math.floor(Math.random() * 6) + 1; // 1-6
  return (roll % 2 === 0)
    ? { accepted: true, roll }
    : { accepted: false, roll };
}
### FILE: ./facilities/special/Temple.mjs 


// FILE: ./facilities/special/Temple.mjs

/*
A Temple houses devotees: up to 3× character level (Roomy) or 5× (Vast).
You can channel that many points of healing or extra damage once per Long Rest.
*/

export const Temple = {
  name: "Temple",
  levelReq: 13,
  prereq: "None",
  canEnlarge: true,
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 4000
  },
  baseOrderOptions: ["Recruit"],
  desc: `
    <h2>Temple (Level 13)</h2>
    <p><strong>Default Space:</strong> Roomy (3× your level devotees). Enlarge to Vast (5× your level) for 4,000 GP.</p>
    <p><strong>Hirelings:</strong> 1 (herald)</p>
    <p><strong>Order:</strong> Recruit -> Devotee</p>
    <p>
      Devotees do not live in the Bastion but gather daily. Once per Long Rest, you can
      add your total devotees in healing or radiant/necrotic damage. 
    </p>
    <p><strong>Recruit:</strong> Takes 7 days, roll a d12 for new devotees, up to your facility’s max.</p>
  `,
  subOrders: {
    Recruit: [
      { label: "Devotee (Roll d12)", key: "TempleRecruitDevotee" }
    ],
  },
  randomEffects: [
    {
      label: "Roll d12 Devotees",
      functionName: "rollDevotees"
    }
  ]
};

/*
Helper function to roll 1d12 for new devotees.
*/
export function rollDevotees() {
  return Math.floor(Math.random() * 12) + 1;
}
### FILE: ./facilities/special/Theater.mjs 


// FILE: ./facilities/Theater.mjs

/*
A Theater has a stage, backstage, and seating. It can host concerts or productions.
Default Space is Vast.
Prerequisite: None.
*/

export const Theater = {
  name: "Theater",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Vast",
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Theater (Level 9)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Vast</p>
    <p><strong>Hirelings:</strong> 4</p>
    <p><strong>Order:</strong> Empower (Theatrical Event)</p>
    <p>
      The Theater contains a stage, backstage, and seating. Commission a production or concert that takes 14 days to rehearse, then at least 7 days of performances.
    </p>
    <p>
      <strong>Empower: Theatrical Event.</strong> At the end of the rehearsal, each contributing character makes a DC 15 Charisma (Performance) check. If more succeed than fail, each gains a Theater die (d6, d8 at level 13, d10 at level 17) that can be added to one d20 Test before the next production.
    </p>
  `,
  subOrders: {
    Empower: [
      { label: "Theatrical Event", key: "TheaterEvent" }
    ]
  },
  // Optional random effect for simulating a Performance check
  randomEffects: [
    {
      label: "Performance Check (DC 15)",
      functionName: "rollTheaterPerformanceCheck"
    }
  ]
};

/*
Helper function simulating a DC 15 Charisma (Performance) check.
*/
export function rollTheaterPerformanceCheck(charismaMod = 0, proficiencyBonus = 0) {
  const d20 = Math.floor(Math.random() * 20) + 1;
  const total = d20 + charismaMod + proficiencyBonus;
  return {
    roll: d20,
    total,
    success: total >= 15
  };
}
### FILE: ./facilities/special/TrainingArea.mjs 


// FILE: ./facilities/TrainingArea.mjs

/*
A Training Area might be a courtyard, gym, music hall, or hazard gauntlet.
Default Space is Vast.
Prerequisite: None.
*/

export const TrainingArea = {
  name: "Training Area",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Vast",
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Training Area (Level 9)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Vast</p>
    <p><strong>Hirelings:</strong> 4</p>
    <p><strong>Order:</strong> Empower (Training)</p>
    <p>
      A Training Area has an expert trainer type (Battle, Skills, Tools, Unarmed Combat, or Weapon). You can change the trainer type each Bastion turn.
    </p>
    <p>
      <strong>Empower: Training.</strong> Over 7 days, any character who trains for at least 8 hours each day gains a 7-day benefit according to the trainer type (damage reduction, skill proficiency, tool proficiency, extra unarmed damage, or weapon mastery).
    </p>
  `,
  subOrders: {
    Empower: [
      { label: "Training", key: "TrainingAreaTraining" }
    ]
  }
  // No randomEffects because the effect is chosen, not randomly determined
};
### FILE: ./facilities/special/Trapworks.mjs 


// FILE: ./facilities/special/Trapworks.mjs

/*
A Trapworks is a workshop to craft a Portable Trap or a Mimic if level ≥ 9.
Steady Hands grants advantage on Sleight of Hand to disarm traps for 7 days.
*/

export const Trapworks = {
  name: "Trapworks",
  levelReq: 5,
  prereq: "ThievesToolsOrSleightOfHand",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Craft"],
  desc: `
    <h2>Trapworks (Level 5)</h2>
    <p><strong>Default Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Craft -> Portable Trap or Mimic (level≥9)</p>
    <ul>
      <li><strong>Steady Hands:</strong> After a Long Rest here, gain advantage on disarming traps for 7 days.</li>
      <li><strong>Portable Trap (7 days, 50 GP):</strong> 4 uses, each can be set with a mode (Trip Wire, Decoy, etc.)
          and an effect (Pit, Poison, Fire, Shrapnel). DC=8+prof+DEX.</li>
      <li><strong>Mimic Familiar (level≥9):</strong> Takes 7 days to create, uses a Mimic stat block as a special "trap" familiar.</li>
    </ul>
  `,
  subOrders: {
    Craft: [
      { label: "Portable Trap (7 days, 50 GP)", key: "TrapworksPortableTrap" },
      { label: "Mimic Familiar (level≥9)", key: "TrapworksMimicFamiliar" }
    ],
  },
  randomEffects: [
    {
      label: "Random Trap Mode",
      functionName: "getRandomTrapMode"
    },
    {
      label: "Random Trap Effect",
      functionName: "getRandomTrapEffect"
    }
  ]
};

/*
Choose a random trap mode or trap effect.
*/
export function getRandomTrapMode() {
  const modes = ["Trip Wire","Decoy","Remote Trigger","Timer"];
  const i = Math.floor(Math.random() * modes.length);
  return modes[i];
}

export function getRandomTrapEffect() {
  const effects = ["Pit Trap","Poison Spray","Fire Gout","Shrapnel"];
  const i = Math.floor(Math.random() * effects.length);
  return effects[i];
}
### FILE: ./facilities/special/TrophyRoom.mjs 


// FILE: ./facilities/TrophyRoom.mjs

/*
A Trophy Room houses a collection of weapons, heads of creatures, and other memorabilia.
Default Space is Roomy.
Prerequisite: None.
*/

export const TrophyRoom = {
  name: "Trophy Room",
  levelReq: 9,
  prereq: "None",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Research"],
  desc: `
    <h2>Trophy Room (Level 9)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1</p>
    <p><strong>Order:</strong> Research (Lore, Trinket Trophy)</p>
    <p>
      The Trophy Room contains items from past exploits or inherited relics.
    </p>
    <p>
      <strong>Research: Lore.</strong> Commission the hireling to research a topic (legend, creature, famous object) for 7 days, revealing up to three new pieces of info.
    </p>
    <p>
      <strong>Research: Trinket Trophy.</strong> Roll any die after 7 days:
      <ul>
        <li>Odd: No useful find.</li>
        <li>Even: A Common magic item (roll on the Implements—Common table in chapter 7).</li>
      </ul>
    </p>
  `,
  subOrders: {
    Research: [
      { label: "Lore", key: "TrophyRoomLore" },
      { label: "Trinket Trophy", key: "TrophyRoomTrinket" }
    ]
  },
  // Random effect for the even/odd roll for finding a trinket
  randomEffects: [
    {
      label: "Trinket Trophy Roll",
      functionName: "rollTrophyRoomTrinket"
    }
  ]
};

/*
Helper function for determining if a trinket is found (odd/even) and which Common magic item is discovered.
*/
export function rollTrophyRoomTrinket() {
  const roll = Math.floor(Math.random() * 6) + 1;
  if (roll % 2 === 1) {
    return { foundItem: false, roll };
  } else {
    // Found a Common magic item: 
    // In an actual implementation, you'd roll on a Common Items table. For now, pick a placeholder item.
    const commonItems = [
      "Potion of Climbing",
      "Spell Scroll (Cantrip)",
      "Potion of Healing",
      "Ammunition +1",
      "Driftglobe",
      "Bag of Holding (Uncommon, but example)"
    ];
    const idx = Math.floor(Math.random() * commonItems.length);
    return { foundItem: true, roll, item: commonItems[idx] };
  }
}
### FILE: ./facilities/special/WarlordsHonorHall.mjs 


// FILE: ./facilities/special/WarlordsHonorHall.mjs

/*
A Warlord’s Honor Hall showcases martial prowess. 
Default space: Roomy. Not enlargeable. 
Long Rest -> commune with a recently defeated foe to gain one proficiency for 24h.
Empower -> 7 days => pick a Blessing (Health, Weapon Enhancement, or Valhalla).
*/

export const WarlordsHonorHall = {
  name: "Warlord’s Honor Hall",
  levelReq: 9,
  prereq: "WeaponMastery2Plus",
  canEnlarge: false,
  defaultSpace: "Roomy",
  baseOrderOptions: ["Empower"],
  desc: `
    <h2>Warlord’s Honor Hall (Level 9)</h2>
    <p><strong>Default Space:</strong> Roomy</p>
    <p><strong>Hirelings:</strong> 1 (squire)</p>
    <p><strong>Order:</strong> Empower -> Warrior’s Blessing (7 days)</p>
    <p>
      <strong>Honored Fallen:</strong> When you Long Rest, you can commune with one enemy
      defeated in the last 24 hours to gain a skill/tool proficiency they had for 24 hours.
      <br/>
      <strong>Warrior’s Blessing:</strong> After 7 days, choose one: Blessing of Health, Weapon
      Enhancement, or Valhalla (DMG). Only one blessing can be active at a time.
    </p>
  `,
  subOrders: {
    Empower: [
      { label: "Warrior’s Blessing (7 days)", key: "WarlordsHonorHallBlessing" },
    ],
  },
  randomEffects: []
};
### FILE: ./facilities/special/WarRoom.mjs 


// FILE: ./facilities/WarRoom.mjs

/*
A War Room is used to plan military actions with loyal lieutenants.
Default Space is Vast.
Prerequisite: Fighting Style feature or Unarmored Defense feature.
*/

export const WarRoom = {
  name: "War Room",
  levelReq: 17,
  prereq: "Fighting Style feature or Unarmored Defense feature",
  canEnlarge: false,
  defaultSpace: "Vast",
  baseOrderOptions: ["Recruit"],
  desc: `
    <h2>War Room (Level 17)</h2>
    <p><strong>Prerequisite:</strong> Fighting Style feature or Unarmored Defense feature</p>
    <p><strong>Space:</strong> Vast</p>
    <p><strong>Hirelings:</strong> 2+ (battle-hardened lieutenants)</p>
    <p><strong>Order:</strong> Recruit (Lieutenant, Soldiers)</p>
    <p>
      The War Room contains a large table and chairs for strategy sessions. You start with two Veteran Warrior lieutenants; you can add more (up to ten). They reduce Bastion Defender losses if attacked.
    </p>
    <p>
      <strong>Recruit Options.</strong>
      <ul>
        <li><strong>Lieutenant.</strong> Gain one new lieutenant (max ten).</li>
        <li><strong>Soldiers.</strong> Each lieutenant can muster 100 Guards or 20 mounted Guards in 7 days, costing 1 GP/day each for food. The army disbands if not fed or led by you/a lieutenant.</li>
      </ul>
    </p>
  `,
  subOrders: {
    Recruit: [
      { label: "Lieutenant", key: "WarRoomLieutenant" },
      { label: "Soldiers", key: "WarRoomSoldiers" }
    ]
  }
  // No randomEffects because no explicit random dice are involved
};
### FILE: ./facilities/special/Workshop.mjs 


// FILE: ./facilities/Workshop.mjs

/*
A Workshop is a creative space for crafting items.
Default Space is Roomy, can enlarge to Vast for 2,000 GP.
Prerequisite: None.
*/

export const Workshop = {
  name: "Workshop",
  levelReq: 5,
  prereq: "None",
  canEnlarge: true, // Roomy->Vast
  defaultSpace: "Roomy",
  enlargeCosts: {
    "Roomy->Vast": 2000
  },
  baseOrderOptions: ["Craft"],
  desc: `
    <h2>Workshop (Level 5)</h2>
    <p><strong>Prerequisite:</strong> None</p>
    <p><strong>Default Space:</strong> Roomy (can enlarge to Vast for 2,000 GP)</p>
    <p><strong>Hirelings:</strong> 3</p>
    <p><strong>Order:</strong> Craft (Adventuring Gear or Magic Item [Implement])</p>
    <p>
      A Workshop has six different kinds of Artisan’s Tools (e.g. Carpenter’s, Cobbler’s, Glassblower’s, Jeweler’s, Leatherworker’s, Mason’s, Painter’s, Potter’s, Tinker’s, Weaver’s, or Woodcarver’s).
    </p>
    <p>
      <strong>Craft Options.</strong>
      <ul>
        <li><strong>Adventuring Gear.</strong> Anything creatable with the chosen tools.</li>
        <li><strong>Magic Item (Implement).</strong> If level 9+, craft a Common or Uncommon magic item from the Implements tables in chapter 7 (time/cost as per “Crafting Magic Items”).</li>
      </ul>
    </p>
    <p>
      <strong>Source of Inspiration.</strong> After a Short Rest here, gain Heroic Inspiration once per Long Rest.
    </p>
    <p>
      Enlarging to Vast adds two more hirelings and three additional types of Artisan’s Tools.
    </p>
  `,
  subOrders: {
    Craft: [
      { label: "Adventuring Gear", key: "WorkshopAdventuringGear" },
      { label: "Magic Item (Implement)", key: "WorkshopMagicItem" }
    ]
  }
  // No randomEffects because no random tables or dice are mentioned for Workshop
};
### FILE: ./index.html 


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Bastion Simulator</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <header>
    <h1>Bastion Simulator</h1>
  </header>

  <main>
    <!-- Collapsible for Bastion & Player Info -->
    <section class="collapsible" data-collapsed="false" id="info-section">
      <div class="collapsible-header" onclick="toggleCollapse(this)">Bastion & Player Info</div>
      <div class="collapsible-content">
        <div class="info-display" id="bastion-info-container"></div>
        <span id="bastionDescOutput"></span>
        <span id="bastionQuirkOutput"></span>
        <section class="collapsible" data-collapsed="true">
          <div class="collapsible-header" onclick="toggleCollapse(this)">Edit</div>
          <div class="collapsible-content">
            <div class="info-form" style="justify-content: center;flex-direction: column;">
              <span>
                <label for="ownerNameInput">Owner:</label>
                <input type="text" id="ownerNameInput" />
              </span>
              <span>
                <label for="bastionNameInput">Name:</label>
                <input type="text" id="bastionNameInput" />
              </span>
              <span>
                <label for="ownerLevelInput">Level:</label>
                <input type="number" id="ownerLevelInput" value="1" min="1" max="20"/>
              </span>
              <div id="prereqs" style="display: contents;">
                <label><input type="checkbox" id="canUseArcaneFocus" />Arcane</label>
                <label><input type="checkbox" id="canUseHolySymbol" />Holy</label>
                <label><input type="checkbox" id="hasFightingStyle" />Combat</label>
                <label><input type="checkbox" id="hasExpertise" />Expertise</label>
              </div>
              <button id="updateInfoBtn" style="width: min-content;">Update</button>
            </div>
            <div id="bastion-description-ui" style="margin: 10px 0px;">
              <h4>Description</h4>
              <select id="bastionDescDropdown"></select>
              <input type="number" id="bastionDescNumber" value="0" min="0" max="100" style="display:none;"/>
              <button id="bastionDescRollBtn">Roll D100</button>
              <div>
                <textarea id="bastionDescCustom" rows="2" placeholder="Custom Description..."></textarea>
                <button id="bastionDescApplyCustom" style="display:grid">Apply Description</button>
              </div>
            </div>
            <div id="bastion-quirk-ui" style="margin: 10px 0px;">
              <h4>Quirk</h4>
              <select id="bastionQuirkDropdown"></select>
              <input type="number" id="bastionQuirkNumber" value="0" min="0" max="100" style="display:none;" />
              <button id="bastionQuirkRollBtn">Roll D100</button>
              <div>
                <textarea id="bastionQuirkCustom" rows="2" placeholder="Custom Quirk..."></textarea>
                <button id="bastionQuirkApplyCustom" style="display:grid">Apply Quirk</button>
              </div>
            </div>
          </div>
        </section>
      </div>
    </section>

    <!-- Finances -->
    <section class="collapsible" data-collapsed="false" id="finances-section">
      <div class="collapsible-header" onclick="toggleCollapse(this)">Finances</div>
      <div class="collapsible-content">
        <div class="info-display">
          <label for="financeChange">Amount (GP):</label>
          <input type="number" id="financeChange" value="0" />
          <button id="addMoneyBtn">+ Add</button>
          <button id="removeMoneyBtn">- Remove</button>
          <p id="finances-info" style="margin-top:10px;"></p>
        </div>
      </div>
    </section>

    <!-- Basic Facilities -->
    <section class="collapsible" data-collapsed="false" id="basic-facility-section">
      <div class="collapsible-header" onclick="toggleCollapse(this)">Add Basic Facility</div>
      <div class="collapsible-content">
        <label for="basicFacilityType">Type:</label>
        <select id="basicFacilityType">
          <option value="Bedroom">Bedroom</option>
          <option value="Courtyard">Courtyard</option>
          <option value="Dining Room">Dining</option>
          <option value="Kitchen">Kitchen</option>
          <option value="Parlor">Parlor</option>
          <option value="Storage">Storage</option>
        </select>
        <label for="basicFacilitySpace">Space:</label>
        <select id="basicFacilitySpace">
          <option value="Cramped">Cramped</option>
          <option value="Roomy">Roomy</option>
          <option value="Vast">Vast</option>
        </select>
        <button id="addBasicFacilityBtn">Add</button>
      </div>
    </section>

    <!-- Special Facilities -->
    <section class="collapsible" data-collapsed="false" id="special-facility-section">
      <div class="collapsible-header" onclick="toggleCollapse(this)">Add Special Facility</div>
      <div class="collapsible-content">
        <label for="specialFacilitySelect">Facility:</label>
        <select id="specialFacilitySelect"></select>
        <button id="addSpecialFacilityBtn">Add</button>
      </div>
    </section>

    <!-- Facilities list -->
    <section class="collapsible" data-collapsed="false" id="facilities-section">
      <div class="collapsible-header" onclick="toggleCollapse(this)">Facilities</div>
      <div class="collapsible-content" id="facilities-list"></div>
    </section>

    <!-- Orders -->
    <section class="collapsible" data-collapsed="false" id="orders-section">
      <div class="collapsible-header" onclick="toggleCollapse(this)">Orders</div>
      <div class="collapsible-content">
        <label for="facilityOrderSelect">Facility:</label>
        <select id="facilityOrderSelect"></select>
        <label for="orderTypeSelect">Order:</label>
        <select id="orderTypeSelect"></select>
        <button id="issueOrderBtn">Issue</button>
        <p id="orderResult"></p>
      </div>
    </section>

    <!-- Turn controls -->
    <div id="controls">
      <button id="nextTurnBtn">Next Turn</button>
    </div>

    <!-- Event Log -->
    <section class="collapsible" data-collapsed="false" id="eventLogSection">
      <div class="collapsible-header" onclick="toggleCollapse(this)">Event Log</div>
      <div class="collapsible-content" id="event-log"></div>
    </section>
  </main>

  <footer>
    <p>&copy; Bastion Simulator</p>
  </footer>

  <!-- JS module. Named "main.js" here for clarity; update if your build uses "main.mjs". -->
  <script type="module" src="main.mjs"></script>
</body>
</html>
### FILE: ./main.mjs 


/* 
  FILE: main.js

  This version modifies handleAllIsWell so that it selects 1-3 messages from among 
  the actual facilities present in the Bastion. Each facility type has 15 distinct 
  “All Is Well” messages, stored in FACILITY_ALL_IS_WELL_MESSAGES.

  The rest of the code is shown in full with no truncation. 
  Inline comments clarify changes.
*/

import { BASIC_FACILITIES_DEFINITIONS } from "./facilities/basic/basicFacilitiesIndex.mjs";
import { SPECIAL_FACILITIES_FULL } from "./facilities/special/specialFacilitiesIndex.mjs";
import {
  BASTION_DESCRIPTIONS,
  BASTION_QUIRKS,
  getBastionDescriptionByRoll,
  getRandomBastionDescription,
  getBastionQuirkByRoll,
  getRandomBastionQuirk
} from "./bastionDescriptions.mjs"; 

/* 
  Utility: store and retrieve cookie values to retain Bastion description/quirk across reloads.
*/
function setCookie(name, value, days = 30) {
  const d = new Date();
  d.setTime(d.getTime() + (days*24*60*60*1000));
  const expires = "expires="+ d.toUTCString();
  document.cookie = `${name}=${encodeURIComponent(value)};${expires};path=/`;
}
function getCookie(name) {
  const nameEQ = name + "=";
  const ca = document.cookie.split(';');
  for(let c of ca) {
    c = c.trim();
    if (c.indexOf(nameEQ) === 0) {
      return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
  }
  return "";
}

/* Bastion description & quirk UI population. */
function populateBastionDescDropdown() {
  const selectEl = document.getElementById("bastionDescDropdown");
  while (selectEl.options.length > 1) {
    selectEl.remove(1);
  }
  BASTION_DESCRIPTIONS.forEach(entry => {
    const opt = document.createElement("option");
    opt.value = entry.roll;
    opt.textContent = `${entry.roll}: ${entry.name}`;
    selectEl.appendChild(opt);
  });
}
function populateBastionQuirkDropdown() {
  const selectEl = document.getElementById("bastionQuirkDropdown");
  while (selectEl.options.length > 1) {
    selectEl.remove(1);
  }
  BASTION_QUIRKS.forEach(entry => {
    const opt = document.createElement("option");
    opt.value = entry.roll;
    opt.textContent = `${entry.roll}: ${entry.text.substring(0,40)}...`;
    selectEl.appendChild(opt);
  });
}

let chosenBastionDescription = "";
let chosenBastionQuirk = "";

function loadBastionDescAndQuirkFromCookie() {
  const savedDesc = getCookie("bastionDescription");
  if (savedDesc) {
    chosenBastionDescription = savedDesc;
    document.getElementById("bastionDescOutput").textContent = chosenBastionDescription;
  }
  const savedQuirk = getCookie("bastionQuirk");
  if (savedQuirk) {
    chosenBastionQuirk = savedQuirk;
    document.getElementById("bastionQuirkOutput").textContent = chosenBastionQuirk;
  }
}

/* Bastion Description handlers. */
function handleBastionDescRollOrPick() {
  const numInput = document.getElementById("bastionDescNumber").value;
  let rollNum = parseInt(numInput, 10);
  if (Number.isNaN(rollNum) || rollNum < 1 || rollNum > 100) {
    const randomEntry = getRandomBastionDescription();
    chosenBastionDescription = `${randomEntry.name}\n\n${randomEntry.text}`;
  } else {
    const entry = getBastionDescriptionByRoll(rollNum);
    chosenBastionDescription = entry ? `${entry.name}\n\n${entry.text}` : "No matching entry found.";
  }
  document.getElementById("bastionDescOutput").textContent = chosenBastionDescription;
  setCookie("bastionDescription", chosenBastionDescription);
}
function handleBastionDescDropdownChange() {
  const ddVal = document.getElementById("bastionDescDropdown").value;
  if (!ddVal) return;
  const rollNum = parseInt(ddVal, 10);
  const entry = getBastionDescriptionByRoll(rollNum);
  if (entry) {
    chosenBastionDescription = `${entry.name}\n\n${entry.text}`;
    document.getElementById("bastionDescOutput").textContent = chosenBastionDescription;
    setCookie("bastionDescription", chosenBastionDescription);
  }
}
function handleBastionDescApplyCustom() {
  const customText = document.getElementById("bastionDescCustom").value.trim();
  if (customText) {
    chosenBastionDescription = customText;
    document.getElementById("bastionDescOutput").textContent = chosenBastionDescription;
    setCookie("bastionDescription", chosenBastionDescription);
  }
}

/* Bastion Quirk handlers. */
function handleBastionQuirkRollOrPick() {
  const numInput = document.getElementById("bastionQuirkNumber").value;
  let rollNum = parseInt(numInput, 10);
  if (Number.isNaN(rollNum) || rollNum < 1 || rollNum > 100) {
    chosenBastionQuirk = getRandomBastionQuirk().text;
  } else {
    const entry = getBastionQuirkByRoll(rollNum);
    chosenBastionQuirk = entry ? entry.text : "No matching entry found.";
  }
  document.getElementById("bastionQuirkOutput").textContent = chosenBastionQuirk;
  setCookie("bastionQuirk", chosenBastionQuirk);
}
function handleBastionQuirkDropdownChange() {
  const ddVal = document.getElementById("bastionQuirkDropdown").value;
  if (!ddVal) return;
  const rollNum = parseInt(ddVal, 10);
  const entry = getBastionQuirkByRoll(rollNum);
  if (entry) {
    chosenBastionQuirk = entry.text;
    document.getElementById("bastionQuirkOutput").textContent = chosenBastionQuirk;
    setCookie("bastionQuirk", chosenBastionQuirk);
  }
}
function handleBastionQuirkApplyCustom() {
  const customText = document.getElementById("bastionQuirkCustom").value.trim();
  if (customText) {
    chosenBastionQuirk = customText;
    document.getElementById("bastionQuirkOutput").textContent = chosenBastionQuirk;
    setCookie("bastionQuirk", chosenBastionQuirk);
  }
}

/* Expand/Collapse sections in the UI. */
window.toggleCollapse = function(headerElement) {
  const parent = headerElement.parentElement;
  parent.dataset.collapsed = parent.dataset.collapsed === "true" ? "false" : "true";
};

/* Format gold with commas. */
function formatGold(gp) {
  return gp.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

/* 
  We define the event table for random Bastion events, each referencing a method by name.
*/
const EVENT_TABLE = [
  { rollMin: 1, rollMax: 40,  method: "handleAllIsWell" },
  { rollMin: 41, rollMax: 48, method: "handleAttack" },
  { rollMin: 49, rollMax: 52, method: "handleCriminalHireling" },
  { rollMin: 53, rollMax: 57, method: "handleExtraordinaryOpportunity" },
  { rollMin: 58, rollMax: 67, method: "handleFriendlyVisitors" },
  { rollMin: 68, rollMax: 72, method: "handleGuest" },
  { rollMin: 73, rollMax: 75, method: "handleLostHirelings" },
  { rollMin: 76, rollMax: 79, method: "handleMagicalDiscovery" },
  { rollMin: 80, rollMax: 88, method: "handleRefugees" },
  { rollMin: 89, rollMax: 97, method: "handleRequestForAid" },
  { rollMin: 98, rollMax: 100, method: "handleTreasure" }
];

/* Basic facility class. */
class BasicFacility {
  constructor(defObj, chosenSpace) {
    this.defObj = defObj;
    this.facilityType = defObj.facilityType;
    this.description = defObj.description;
    this.space = chosenSpace || defObj.defaultSpace || "Cramped";
    this.enlargeInProgress = false;
    this.enlargeTimeRemaining = 0;
  }
}

/* Special facility class (for the more complex facilities). */
class SpecialFacility {
  constructor(defObj, chosenSpace) {
    this.defObj = defObj;
    this.name = defObj.name;
    this.requiredLevel = defObj.levelReq;
    this.prerequisite = defObj.prereq;
    this.canEnlarge = defObj.canEnlarge;
    this.possibleOrders = defObj.baseOrderOptions || [];
    this.subOrders = defObj.subOrders || {};
    this.description = defObj.desc || "";
    this.space = chosenSpace || defObj.defaultSpace || "Cramped";
    this.shutDownNextTurn = false;
    this.enlargeInProgress = false;
    this.enlargeTimeRemaining = 0;
    this.orderUsedThisTurn = false;
    this.charmCooldown = 0;
  }
}

/* 
  We define 15 messages per facility type for “All Is Well.” 
  Only facilities that actually exist in the Bastion will have 
  their messages considered in handleAllIsWell.
*/
const FACILITY_ALL_IS_WELL_MESSAGES = {
  /* Basic Facilities */
  "Bedroom": [
    "Fresh linens arrived in the Bedroom, making rest more comfortable.",
    "A warm draft in the Bedroom has kept everyone in high spirits overnight.",
    "Someone placed calming flowers in the Bedroom, improving sleep quality.",
    "Sunlight fell perfectly through the Bedroom window, brightening moods.",
    "No strange noises were heard in the Bedroom at all last night.",
    "The Bedroom was tidied expertly, and everyone feels more organized.",
    "A subtle lavender scent now fills the Bedroom, improving relaxation.",
    "An old painting found in the Bedroom adds a touch of history.",
    "A traveling tailor donated new blankets for the Bedroom’s beds.",
    "The Bedroom’s squeaky door hinge was quietly oiled.",
    "A letter was found under a Bedroom pillow, containing kind words.",
    "A lullaby singer visited, enhancing rest in the Bedroom for one night.",
    "Birdsong outside the Bedroom windows gently wakes sleepers at dawn.",
    "A cat was found napping on a Bedroom window sill, purring contentedly.",
    "All who slept in the Bedroom reported particularly pleasant dreams."
  ],
  "Courtyard": [
    "The Courtyard’s flowers are in full bloom, delighting everyone passing by.",
    "A stray cat peacefully roams the Courtyard, charming visitors.",
    "Sunlight bathed the Courtyard for most of the day, raising morale.",
    "A gentle breeze cooled off the Courtyard perfectly this afternoon.",
    "Small birds nested in a quiet corner of the Courtyard, chirping happily.",
    "The Courtyard fountain’s water is exceptionally clear and refreshing.",
    "A local sculptor is adding a decorative statue in the Courtyard for free.",
    "Courtyard benches were polished, gleaming in the midday sun.",
    "Guards found the Courtyard a perfect place for quiet reflection today.",
    "Children played safely in the Courtyard, filling it with laughter.",
    "Decorative lanterns now line the Courtyard’s perimeter at dusk.",
    "A traveling minstrel performed in the Courtyard, lifting spirits.",
    "A rare flower blossomed unexpectedly in the Courtyard’s corner.",
    "A gentle rain watered the Courtyard plants without drenching visitors.",
    "The Courtyard’s stone paths were meticulously swept and look pristine."
  ],
  "Dining Room": [
    "The Dining Room’s tables were set with fresh linens and cheerful colors.",
    "Everyone complimented the new table arrangement in the Dining Room.",
    "A traveling chef left behind some exotic spices for the Dining Room staff.",
    "The Dining Room’s chairs were repaired, eliminating any wobbly seats.",
    "Fresh flowers adorn each table in the Dining Room, adding sweet aromas.",
    "A bright chandelier in the Dining Room glistens, reflecting warm light.",
    "Mealtime in the Dining Room ended with lively toasts and good cheer.",
    "The Dining Room walls were repainted in a comforting hue.",
    "A spontaneous singing broke out during dinner in the Dining Room.",
    "Cooks discovered an old family recipe that wowed everyone at mealtime.",
    "Small decorations now hang above each Dining Room table, adding whimsy.",
    "A newly woven rug gives the Dining Room a cozy, welcoming feel.",
    "Guests noted how the Dining Room somehow makes food taste better.",
    "No scraps were wasted—kitchen staff boasted perfect portion planning.",
    "Quiet music filled the Dining Room during dinner, enhancing conversation."
  ],
  "Kitchen": [
    "The Kitchen staff perfected a new stew recipe that’s pleasing the masses.",
    "Delicious aromas from the Kitchen waft through the halls.",
    "Storage containers in the Kitchen are fully stocked and well-organized.",
    "A chef’s apprentice surprised everyone with perfect pastries.",
    "The Kitchen’s hearth was cleaned, improving cooking conditions.",
    "Local farmers donated fresh produce for the Kitchen’s next meal.",
    "Someone left a rare spice blend in the Kitchen, sparking culinary ideas.",
    "A squeaky pantry door in the Kitchen was finally fixed.",
    "The Kitchen staff found a lost family cookbook among old crates.",
    "A jug of sweet honey arrived in the Kitchen, courtesy of a traveling merchant.",
    "New knives in the Kitchen make food prep faster and safer.",
    "A cheerful tune from the Kitchen staff keeps everyone’s spirits high.",
    "A wizard visitor enhanced the Kitchen’s stove with gentle warming magic.",
    "Clean-up was so efficient that the Kitchen floors almost sparkle.",
    "Every dish today turned out flawlessly, delighting Bastion residents."
  ],
  "Parlor": [
    "Visitors to the Parlor praised its comfortable chairs and welcoming vibe.",
    "The Parlor’s fireplace radiated warmth without any smoke issues.",
    "A caretaker dusted antiques in the Parlor, making them gleam.",
    "Soft music played in the Parlor all afternoon, soothing guests.",
    "The Parlor gained a lovely new tapestry from a traveling artist.",
    "A fresh bowl of fruit in the Parlor brightened everyone’s day.",
    "Arriving guests found the Parlor a charming spot for small talk.",
    "A lost ring was found under a Parlor sofa and returned to its owner.",
    "Sunbeams through the Parlor windows gave it a pleasant atmosphere.",
    "Comfortable pillows in the Parlor invite people to linger longer.",
    "A potted plant in the Parlor blossomed with unexpected flowers.",
    "A humorous anecdote was shared in the Parlor, breaking tensions.",
    "Light refreshments served in the Parlor boosted morale all around.",
    "The Parlor walls were touched up, revealing bright, clean paintwork.",
    "A traveling bard strummed a lute in the Parlor, enchanting listeners."
  ],
  "Storage": [
    "Staff reorganized the Storage neatly, discovering extra supplies.",
    "No pests were found in the Storage area for the first time in weeks.",
    "A mislabeled crate in Storage was opened to find useful building materials.",
    "Storage shelves were reinforced and now hold heavier loads safely.",
    "A local craftsman donated new boxes to better organize Storage.",
    "Old cobwebs in Storage were cleared, making the room more inviting.",
    "An air of freshness replaced the usual musty smell in Storage.",
    "A guard found a misplaced heirloom in Storage and turned it in.",
    "Additional lanterns now light up the Storage room corners.",
    "Labels were updated in Storage, reducing confusion over crates.",
    "A rare spice was discovered among old supplies in Storage.",
    "The Storage door got a new lock, ensuring better security.",
    "Stacked items in Storage form a safe and tidy arrangement.",
    "A traveling merchant left behind extra sacks of grain in Storage.",
    "It turns out Storage had more space than previously realized!"
  ],

  /* Special Facilities */
  "Aviary": [
    "A tamed hawk in the Aviary learned a new friendly greeting call.",
    "The Aviary’s nests are particularly cozy, ensuring content birds.",
    "A visiting ranger complimented the Aviary’s cleanliness and design.",
    "Feathers collected in the Aviary are being used for quills and pillows.",
    "A new ravens’ perch was installed in the Aviary, expanding capacity.",
    "Exotic birdseed was donated to the Aviary by a traveling merchant.",
    "A joyful chorus of chirps in the Aviary greeted everyone at dawn.",
    "A bright sunbeam warms the Aviary, pleasing the winged residents.",
    "The Aviary gained a gifted falcon that seems especially loyal.",
    "The caretaker discovered a hidden stash of feed, enough for weeks.",
    "A rescued owl found solace in the Aviary and quickly adapted.",
    "A mild breeze flows through the Aviary, keeping air fresh and clean.",
    "A patient raven taught a younger bird how to mimic words quietly.",
    "An aviary hatchling was born healthy, delighting onlookers.",
    "Smooth flight practice sessions brightened everyone’s mood today."
  ],
  "Arcane Study": [
    "An apprentice in the Arcane Study managed a tricky cantrip flawlessly.",
    "A dusty tome in the Arcane Study revealed a surprisingly helpful tip.",
    "Arcane symbols drawn on the Study’s walls glowed gently today.",
    "A short magical lightshow entertained the Arcane Study’s visitors.",
    "A flickering candle levitated briefly in the Arcane Study, startling no one.",
    "A traveling wizard offered to share new spell insights in the Arcane Study.",
    "The Arcane Study’s supply of parchment was neatly restocked for free.",
    "A helpful unseen servant dusted the Arcane Study’s shelves unprompted.",
    "Someone found a hidden bookmark in the Arcane Study referencing a rare spell.",
    "A warding glyph in the Arcane Study quietly repelled harmful pests.",
    "A new star chart pinned on the Arcane Study wall inspired deeper research.",
    "A visiting mage praised the Arcane Study’s tranquil atmosphere for study.",
    "Sparkling motes of light briefly danced above a lectern in the Arcane Study.",
    "A note left behind gave directions to a helpful magical reagent vendor.",
    "A shimmering illusion of a floating orb guided novices to the right shelf."
  ],
  "Archive": [
    "A lost scroll turned up in the Archive, revealing minor historical details.",
    "Archive shelves were reorganized, making research easier.",
    "Dusty tomes in the Archive were carefully brushed off.",
    "A visiting scholar left complimentary notes about the Archive’s breadth.",
    "A caretaker discovered an intact map hidden in the Archive’s back corner.",
    "The Archive’s reading desk was refinished to a soft gleam.",
    "Clever indexing now helps hirelings find documents faster in the Archive.",
    "A mild cedar scent in the Archive keeps old books well-preserved.",
    "A rare genealogical chart discovered in the Archive delighted historians.",
    "The Archive’s candles burned smokelessly all week.",
    "Fresh binding repairs keep the Archive’s older volumes from crumbling.",
    "A quiet hush fell over the Archive, ideal for focused study.",
    "A local historian praised the Archive for its meticulously sorted records.",
    "New labels on the Archive’s shelves reduce confusion among novices.",
    "Mice avoided the Archive entirely, leaving its scrolls untouched."
  ],
  "Armory": [
    "All gear in the Armory is neatly arranged, saving time during drills.",
    "Shields polished in the Armory gleam with a mirror finish.",
    "A local blacksmith donated a high-quality spear to the Armory.",
    "The Armory’s racks were upgraded, preventing any weapon damage.",
    "A stray arrow found in the Armory turned out to be just a harmless prop.",
    "Defenders found the Armory easy to navigate thanks to new labels.",
    "A decorative helmet was polished and now serves as a showpiece.",
    "A routine inspection revealed no rust or wear in the Armory’s gear.",
    "Swords from the Armory were tested and found perfectly balanced.",
    "A visiting knight praised the Armory’s readiness.",
    "New arrow bundles arrived unexpectedly, filling the Armory’s quivers.",
    "The Armory floor was waxed, preventing accidental slips.",
    "Weapon stands in the Armory were reinforced to hold heavier gear.",
    "A slight aura of protection seems to bless the Armory’s doorway.",
    "Special friction oil used in the Armory ensures no squeaky hinges remain."
  ],
  "Barrack": [
    "Barrack bunkbeds were repaired, allowing for more restful sleep.",
    "No snoring complaints were heard from the Barrack last night.",
    "The Barrack’s footlockers were reorganized with fresh cedar blocks.",
    "A friendly bet in the Barrack ended harmoniously, boosting camaraderie.",
    "Defenders praised the Barrack’s ventilation, keeping it fresh.",
    "New recruits commented on the Barrack’s tidy conditions.",
    "A traveling armorer dropped off extra blankets for the Barrack bunks.",
    "An old motivational banner found in the Barrack raises morale.",
    "The Barrack’s latrine is spotlessly clean, surprising everyone.",
    "An off-duty guard serenaded the Barrack with a surprisingly good tune.",
    "A missing shoe was located behind a Barrack cabinet, saving a soldier’s day.",
    "Sunbeams through the Barrack windows lit it warmly this morning.",
    "A caretaker’s daily sweep kept the Barrack free of clutter.",
    "No disputes arose in the Barrack, as everyone remained in high spirits.",
    "Fresh straw under the mattresses led to unusually restful nights."
  ],
  "Demiplane": [
    "The Demiplane’s walls shimmered faintly with stable arcane runes.",
    "A gentle hum resonates in the Demiplane, soothing its visitors.",
    "Someone found a small stash of harmless illusions dancing in one corner.",
    "The Demiplane’s lighting adjusts automatically to each occupant’s preference.",
    "A squeaky echo from the Demiplane vanished, replaced by calm silence.",
    "An unexpected swirl of color in the Demiplane brought joy, not danger.",
    "A hidden niche in the Demiplane revealed small, pleasant trinkets.",
    "Runes inside the Demiplane glowed warmly, exuding faint protective magic.",
    "A lost cat somehow wandered into the Demiplane and was easily rescued.",
    "The Demiplane’s temperature remained perfectly comfortable without effort.",
    "Quiet meditation in the Demiplane renewed everyone’s focus.",
    "A faint starry sky effect on the Demiplane ceiling enchanted onlookers.",
    "No magical mishaps occurred in the Demiplane, reassuring new visitors.",
    "A caretaker discovered the Demiplane can gently play ambient music.",
    "Time in the Demiplane felt especially restful, boosting morale for a day."
  ],
  "Gaming Hall": [
    "Laughter and cheers arose from the Gaming Hall’s friendly contests.",
    "Cards and dice in the Gaming Hall remained fair and balanced.",
    "A local gambler performed clever tricks that entertained watchers.",
    "No one was caught cheating in the Gaming Hall for once.",
    "A batch of fresh snacks arrived to keep Gaming Hall players energized.",
    "Musical accompaniment in the Gaming Hall set a jovial tone.",
    "Even small wagers in the Gaming Hall brought big smiles.",
    "A traveling puzzle master left behind a new board game for the Hall.",
    "Friendly rivalry blossomed, but with no hard feelings afterward.",
    "Someone donated comfortable cushions for the Gaming Hall’s chairs.",
    "A comedic duo performed an impromptu routine between dice rounds.",
    "New playing cards were introduced, with gorgeous painted backs.",
    "The Hall’s lighting was perfect, showing every detail of the games.",
    "A skillful dart thrower gave a free lesson, impressing onlookers.",
    "Cooperative games in the Hall improved overall Bastion camaraderie."
  ],
  "Garden": [
    "The Garden’s flowers are in full bloom, painting it with vibrant color.",
    "A rare bird visited the Garden’s birdbath, delighting onlookers.",
    "New stepping stones in the Garden make strolling more pleasant.",
    "Vegetables harvested from the Garden turned out exceptionally tasty.",
    "A gentle rain watered the Garden perfectly without over-soaking.",
    "The Garden’s caretaker found a patch of medicinal herbs thriving.",
    "No pests bothered the Garden this week, leaving plants healthy.",
    "A small fountain in the Garden trickles soothingly all day.",
    "Sunlight fell beautifully on the Garden, encouraging new blossoms.",
    "An unexpected patch of wildflowers brightens a Garden corner.",
    "The Garden’s topiary got a neat trim, revealing playful shapes.",
    "A few butterflies flitted about the Garden, enchanting passersby.",
    "An aromatic herb in the Garden helps keep insects away naturally.",
    "Soft lanterns now light the Garden paths at night, creating a serene view.",
    "A local druid complimented the Garden’s harmonious design."
  ],
  "Greenhouse": [
    "The Greenhouse’s humidity balance was perfect this week, boosting growth.",
    "Exotic buds in the Greenhouse opened into impressive blossoms.",
    "A caretaker found baby sprouts thriving in a forgotten corner of the Greenhouse.",
    "Warm sunbeams through the Greenhouse glass brightened everyone’s mood.",
    "Rare healing herbs in the Greenhouse look especially robust today.",
    "The Greenhouse’s magical fruit bore extra produce, delighting the staff.",
    "Fresh potting soil arrived for the Greenhouse, at no extra cost.",
    "Gentle condensation on the Greenhouse walls kept everything hydrated.",
    "A mild breeze circulated through the Greenhouse’s vents, preventing mold.",
    "A traveling botanist praised the Greenhouse’s top-notch care.",
    "Fruit vines in the Greenhouse show signs of bumper harvest soon.",
    "Tiny beneficial insects were introduced to the Greenhouse for pest control.",
    "A novice caretaker impressed everyone by saving a wilting plant in time.",
    "Sunset in the Greenhouse created a striking rainbow of color on the leaves.",
    "The Greenhouse door latch was repaired, making entry smoother."
  ],
  "Guildhall": [
    "Guild members hosted a mini-festival at the Guildhall, raising spirits.",
    "A newly joined specialist gave free training sessions in the Guildhall.",
    "No grievances were filed among Guild members this week, a rare peace.",
    "Guildhall notice boards were updated with fresh, exciting job postings.",
    "Craft demonstrations at the Guildhall wowed local novices.",
    "Visiting dignitaries praised the Guildhall for fostering collaboration.",
    "A philanthropic sponsor donated supplies for the Guildhall’s next event.",
    "A comedic skit improvised at the Guildhall left everyone laughing.",
    "A plaque was unveiled, honoring the Guildhall’s founding members.",
    "Stewards organized a successful membership drive at the Guildhall.",
    "Inventors displayed their contraptions in the Guildhall, drawing crowds.",
    "Guildhall kitchens provided hearty meals for all, free of charge.",
    "A storeroom reorganization uncovered forgotten but useful resources.",
    "A minor rivalry was resolved amicably in a Guildhall arbitration.",
    "Guild trainees expressed gratitude for the welcoming atmosphere."
  ],
  "Laboratory": [
    "No accidental spills happened in the Laboratory this week—astonishing!",
    "A successful experiment in the Laboratory produced harmless fireworks.",
    "Air filters in the Laboratory prevented any noxious fumes entirely.",
    "A new labeling system keeps the Laboratory’s reagents neatly sorted.",
    "An herbalist donated dried plants for the Laboratory’s experiments.",
    "All glassware in the Laboratory was found intact, none broken.",
    "A random spark of arcane energy in the Laboratory fizzled safely.",
    "A bright-minded apprentice synthesized a mild healing salve in the Lab.",
    "The Laboratory’s watersource was tested and found perfectly pure.",
    "Sunlight from a skylight brightened the Laboratory’s entire workspace.",
    "An alchemist’s journal discovered in the Lab gave valuable tips.",
    "A visiting gnome tinkered with apparatus, leaving improvements behind.",
    "A sweet scent wafted through the Laboratory from a benign experiment.",
    "Protective wards in the Laboratory performed flawlessly during tests.",
    "Glass equipment sparkles after a thorough cleaning spree."
  ],
  "Library": [
    "A quiet hush graced the Library, perfect for reading and reflection.",
    "Someone donated new volumes to the Library, expanding its collection.",
    "Patrons easily found references in the Library thanks to neat indexing.",
    "Sunbeams illuminated reading tables in the Library, comforting scholars.",
    "A traveling bard read folklore aloud in the Library, mesmerizing listeners.",
    "No pages were found torn or missing among the Library’s books.",
    "Candleholders in the Library glowed steadily without soot.",
    "An ancient bestiary in the Library contained helpful creature notes.",
    "New comfortable chairs arrived for the Library’s reading area.",
    "Scholars discovered a forgotten treatise that might prove valuable.",
    "A sweet herbal tea stand near the Library entrance keeps readers cozy.",
    "The Librarian introduced a new checkout system that runs smoothly.",
    "No dust lingered on shelves after a thorough cleaning last night.",
    "Quiet footfalls in the Library signaled respect for its studious air.",
    "A language primer found in the Library helped visitors communicate better."
  ],
  "Meditation Chamber": [
    "Soft chanting in the Meditation Chamber relaxed participants’ minds.",
    "Incense used in the Meditation Chamber had a soothing floral scent.",
    "A caretaker discovered extra cushions, ensuring comfort for all.",
    "Gentle candlelight in the Meditation Chamber created serene shadows.",
    "A sudden insight in the Meditation Chamber resolved a vexing problem.",
    "Stones in the Meditation Chamber floor felt pleasantly warm underfoot.",
    "Quiet harp music accompanied a peaceful session in the Meditation Chamber.",
    "A swirl of calming air circulated, centering those who entered.",
    "No external noise disturbed the Meditation Chamber for an entire day.",
    "Mats in the Meditation Chamber were replaced with higher-quality versions.",
    "A visiting monk praised the Chamber’s tranquility, leaving a small donation.",
    "Fresh water was provided in the Chamber, refreshing meditating souls.",
    "Participants emerged from the Meditation Chamber visibly calmer.",
    "A gentle gong in the Meditation Chamber guided breath timing for novices.",
    "Light from a single window cast a comforting pattern on the Chamber wall."
  ],
  "Menagerie": [
    "The Menagerie’s creatures appear calm and well-fed, impressing visitors.",
    "A new caretaker established a friendly rapport with the caged beasts.",
    "Fresh straw in the Menagerie enclosures brightened the animals’ day.",
    "No creature tried to escape the Menagerie this week, a welcome relief.",
    "A veterinarian offered free check-ups for the Menagerie’s creatures.",
    "Playful noises from the Menagerie delighted passersby.",
    "The creatures’ coats or scales have grown especially lustrous.",
    "No feeding mishaps occurred in the Menagerie, easing caretaker concerns.",
    "A small baby creature was safely born under caretaker supervision.",
    "The Menagerie’s air smells cleaner than usual, pleasing visitors.",
    "Defenders found the Menagerie surprisingly relaxing after patrols.",
    "A traveling druid recognized the Menagerie’s respectful habitat design.",
    "Creatures that once seemed anxious now appear at ease with each other.",
    "A hidden corner of the Menagerie was turned into a relaxing nest area.",
    "Rainy weather did not disturb the Menagerie’s enclosures thanks to tarps."
  ],
  "Observatory": [
    "Clear skies let the Observatory’s telescope reveal breathtaking stars.",
    "A faint cosmic glow reflected on the Observatory walls, enchanting onlookers.",
    "A new star map pinned in the Observatory marks a recent comet’s path.",
    "No cloud cover obstructed nightly observations in the Observatory.",
    "A visiting astronomer marveled at the Observatory’s well-calibrated lens.",
    "The telescope pivoted smoothly, thanks to fresh lubrication.",
    "A shooting star was witnessed by those in the Observatory, raising excitement.",
    "Sunset from the Observatory vantage painted the sky in striking colors.",
    "A cosmic hush seemed to fill the Observatory, aiding deep thought.",
    "A playful sprite flitted through the Observatory, but caused no trouble.",
    "Stargazers cooperated to note an unknown constellation’s movement.",
    "The Observatory’s small library now includes ephemeral cosmic charts.",
    "Gentle breezes at the dome prevented fogging of the telescope lens.",
    "A mild enchantment kept the Observatory’s temperature comfortable all night.",
    "A subtle alignment of planets gave the Observatory watchers a sense of wonder."
  ],
  "Pub": [
    "Cheerful chatter echoed through the Pub, lifting everyone’s mood.",
    "No bar brawls broke out in the Pub all night, astonishing the bartender.",
    "A visiting musician entertained Pub patrons with lively tunes.",
    "Free snacks arrived at the Pub, courtesy of a grateful traveler.",
    "The Pub’s new casks of ale taste particularly smooth this batch.",
    "A local rumor brought laughter rather than tension to the Pub’s crowd.",
    "No spilled drinks stained the Pub floors this evening—miraculously.",
    "The bartender discovered a unique cocktail recipe that patrons adore.",
    "An undercover spy congratulated the Pub on its top-notch hospitality.",
    "Patrons found comfortable seating in the Pub’s improved layout.",
    "A small victory toast in the Pub turned into a full-blown celebration.",
    "Storytellers regaled the Pub with heroic tales, mesmerizing listeners.",
    "Free coffee or tea for designated drivers improved safety, ironically.",
    "The Pub’s lighting is warm and comforting, welcoming all who enter.",
    "Generous tips flowed, keeping the Pub staff in high spirits."
  ],
  "Reliquary": [
    "A gentle glow emanated from the Reliquary’s sacred objects.",
    "No dust or tarnish marred the holy items inside the Reliquary.",
    "A supplicant found quiet solace in the Reliquary without disturbing others.",
    "Ritual candles burned purely, leaving no traces of smoke behind.",
    "A delicate relic in the Reliquary radiated a subtle warmth today.",
    "A caretaker detected faint chanting in the Reliquary, but found no cause for alarm.",
    "Visitors left the Reliquary feeling unusually hopeful.",
    "The Reliquary’s protective wards hummed softly, reassuring passersby.",
    "A lost saint’s medal reappeared on a Reliquary shelf, mystifying caretakers.",
    "No malevolent presence seemed able to approach the Reliquary.",
    "All who entered the Reliquary felt a cleansing sense of peace.",
    "A minor miracle: a crack on a relic’s casing spontaneously resealed.",
    "The Reliquary’s caretaker completed daily devotions with renewed vigor.",
    "A random pilgrim left an offering at the Reliquary’s entrance gratefully.",
    "Soft singing echoes within the Reliquary, though no singer is seen."
  ],
  "Sacristy": [
    "Vestments in the Sacristy emerged spotless from a quick wash.",
    "A gentle aura of warmth suffused the Sacristy, delighting worshipers.",
    "A newly carved holy symbol was placed on display in the Sacristy.",
    "No disputes arose regarding religious differences in the Sacristy this week.",
    "Fresh beeswax candles give the Sacristy a comforting glow.",
    "A traveling priest praised the Sacristy’s reverent atmosphere.",
    "Sacred implements in the Sacristy were polished to a bright sheen.",
    "A minor divine blessing stabilized a fragile relic in the Sacristy.",
    "Devout visitors found the Sacristy a perfect place for quiet prayer.",
    "No unholy influence dared enter the Sacristy, furthering its sanctity.",
    "The Sacristy’s caretaker reported a surprising sense of calm all day.",
    "Gentle chants were heard in the Sacristy, soothing anxious hearts.",
    "A lovely arrangement of flowers brightens the Sacristy’s altar table.",
    "No wax drips stained the floor, thanks to carefully placed candle holders.",
    "A scribbled note of gratitude was left for the Sacristy’s caretaker."
  ],
  "Sanctuary": [
    "Healing Word charms left from the Sanctuary brought comfort to many.",
    "Quiet worship in the Sanctuary eased troubled minds seamlessly.",
    "A pilgrim’s thanks echoed in the Sanctuary, praising its peaceful energy.",
    "The Sanctuary’s icons looked especially radiant in the morning light.",
    "An ailing visitor felt renewed vitality after kneeling in the Sanctuary.",
    "A caretaker replaced old tapestries, giving the Sanctuary a vibrant look.",
    "Sunbeams shone through stained glass, painting the Sanctuary in color.",
    "No disruptions or arguments arose near the Sanctuary’s holy space.",
    "A lost child found reassurance inside the Sanctuary until reunited.",
    "Flowers placed at the Sanctuary’s altar remained fresh and lively.",
    "The Sanctuary’s benches were polished, now smooth to the touch.",
    "Soft chanting in the Sanctuary created a gentle reverberation of peace.",
    "Donations in the Sanctuary box increased, reflecting gratitude.",
    "A traveling cleric commended the Sanctuary’s devotion and cleanliness.",
    "The Sanctuary’s silence offered respite to anyone seeking reflection."
  ],
  "Sanctum": [
    "A faint but uplifting hymn drifted through the Sanctum spontaneously.",
    "A caretaker found old records describing past miracles in the Sanctum.",
    "Those who prayed in the Sanctum felt a warm presence uplifting them.",
    "The Sanctum’s wards hummed gently, exuding protective energies.",
    "A quiet corner of the Sanctum offered perfect solitude for reflection.",
    "A random philanthropic visitor left a generous donation in the Sanctum.",
    "Clean floors and polished icons enhanced the Sanctum’s serene aura.",
    "A subtle breeze cleared away any stale air in the Sanctum’s corridors.",
    "A small group offered thanks for the Sanctum’s healing atmosphere.",
    "No malevolent force even approached the Sanctum’s threshold this week.",
    "Daily rites concluded with a sense of genuine community among worshipers.",
    "One devotee claimed to see a gentle divine light within the Sanctum’s hall.",
    "A traveling druid found the Sanctum’s energy surprisingly comforting.",
    "Incense in the Sanctum carried a calming, almost rejuvenating fragrance.",
    "A sleeping guard within the Sanctum woke feeling more vigorous than ever."
  ],
  "Scriptorium": [
    "A scribe in the Scriptorium finished copying a text with zero mistakes.",
    "No ink spills occurred in the Scriptorium all week, surprising everyone.",
    "A new quill set was donated to the Scriptorium by a grateful scholar.",
    "Illuminated letters from the Scriptorium gained praise for their beauty.",
    "A gentle hum of concentration filled the Scriptorium, no distractions.",
    "Scribes discovered a more efficient layout, improving writing speed.",
    "A calligraphy master taught novices in the Scriptorium free of charge.",
    "Stacks of blank parchment arrived just as the Scriptorium needed them.",
    "A new technique for making ink brightened the Scriptorium’s works.",
    "A translator uncovered a small but powerful incantation in an old letter.",
    "The Scriptorium’s reference charts remain well-maintained and legible.",
    "Sunbeams fell across a desk, inspiring a scribe’s best writing yet.",
    "No quill tips broke, and no smudges marred the Scriptorium’s pages.",
    "A traveling historian recognized the Scriptorium’s valuable archives.",
    "Minor illusions danced on a page, delighting those present."
  ],
  "Smithy": [
    "Sparks flew safely at the Smithy’s forge, forging excellent items.",
    "All anvils in the Smithy showed no signs of cracking or dents.",
    "A blacksmith’s apprentice delivered unexpectedly fine craftsmanship.",
    "No hammer mishaps occurred in the Smithy, a small miracle indeed.",
    "The Smithy’s fires burned steadily at an ideal forging temperature.",
    "Gleaming metal items lined the Smithy’s racks, impressing passersby.",
    "Extra coal arrived, keeping the Smithy fully stocked for days.",
    "A new forging technique tested in the Smithy proved efficient.",
    "Visiting dwarves complimented the Smithy’s layout and tools.",
    "A horseshoe made in the Smithy is rumored to bring good luck.",
    "The ring of hammers in the Smithy sounded almost musical at times.",
    "A traveling warrior praised the Smithy’s well-balanced weapon forging.",
    "An old hammer was replaced with a newly wrought, superior tool.",
    "No injuries or burns reported in the Smithy, relieving the medic’s worry.",
    "A cooling trough in the Smithy now sports crystal-clear water daily."
  ],
  "Stable": [
    "All horses in the Stable appear well-groomed and calm.",
    "No hoof issues arose in the Stable, pleasing the caretaker.",
    "A traveling merchant left an extra bale of hay for the Stable animals.",
    "Hitching posts in the Stable were securely reinforced.",
    "Fresh straw beddings in the Stable gave the mounts a comfortable rest.",
    "A new bridle was donated, perfectly fitting the largest horse.",
    "No horse tried to break free from the Stable, surprising the staff.",
    "Grooming sessions went flawlessly, leaving every mount shining.",
    "A well-behaved dog accompanied a traveler, befriending the Stable animals.",
    "Stable aisles are swept clean, reducing accidents and improving safety.",
    "A traveling bard sang lullabies in the Stable, calming nervous horses.",
    "All tack in the Stable is well-oiled and easy to handle.",
    "Rainstorms didn’t disturb the Stable thanks to well-maintained roofing.",
    "A new feed mix delighted the mounts, improving their coat sheen.",
    "Local children visited the Stable, happily petting the gentle ponies."
  ],
  "Storehouse": [
    "The Storehouse’s inventory checks out perfectly, no discrepancies.",
    "No sign of rodents or insects in the Storehouse—an impressive feat.",
    "A robust lock installed on the Storehouse door improved security.",
    "A mislabeled crate in the Storehouse turned out to contain useful gear.",
    "The Storehouse layout feels more spacious after reorganization.",
    "Fresh air was circulated in the Storehouse, removing musty odors.",
    "No items in the Storehouse expired or spoiled, preventing waste.",
    "An assistant found hidden compartments revealing a few bonus goods.",
    "A merchant delivered extra supplies to the Storehouse free of charge.",
    "A caretaker took inventory thoroughly, finding everything accounted for.",
    "Polite visitors found the Storehouse staff helpful and friendly.",
    "Some goods in the Storehouse were sold at a slight premium, boosting revenue.",
    "Dusting the Storehouse revealed a small coffer with petty coin inside.",
    "A new labeling system in the Storehouse reduced confusion significantly.",
    "Everything in the Storehouse is stacked neatly, preventing collapses."
  ],
  "Teleportation Circle": [
    "Runes in the Teleportation Circle glowed steadily without fluctuation.",
    "No stray energies disrupted the Teleportation Circle this week.",
    "A visiting mage found the circle’s script delightfully precise.",
    "An unexpected arrival turned out to be a friendly traveling scholar.",
    "All who used the Teleportation Circle reported smooth journeys.",
    "An artistic caretaker decorated the circle’s perimeter with chalk designs.",
    "A faint hum from the Teleportation Circle remained comforting, not ominous.",
    "Arcane motes danced briefly above the Teleportation Circle then vanished.",
    "No mishaps occurred in coordinate input for the Teleportation Circle.",
    "A harmless swirl of light delighted onlookers as the Circle powered up.",
    "A traveling wizard left a small donation to thank you for safe passage.",
    "Protective wards around the Circle prevented unauthorized intrusions.",
    "A bright flourish flared each time the Circle activated, enthralling watchers.",
    "No uninvited creatures emerged from the Circle the entire week.",
    "Coordinates on the circle floor were re-inked, ensuring clarity."
  ],
  "Theater": [
    "The Theater’s stage remains spotless after a lively performance.",
    "Acoustics in the Theater excelled, carrying every note clearly.",
    "A small comedic act in the Theater brought roaring laughter.",
    "Dancers rehearsed in the Theater without stumbling once.",
    "The Theater’s audience seating was reorganized for better viewing.",
    "A traveling troupe praised the Theater’s comfortable backstage area.",
    "Everyone applauded a stunning solo performance in the Theater.",
    "A new script circulated among Theater staff, promising a hit production.",
    "The stage curtains in the Theater were cleaned, showing vibrant colors.",
    "Spontaneous applause erupted when a child tried the stage, boosting morale.",
    "Lightning outside only enhanced the Theater’s cozy indoor ambiance.",
    "A lighting technician improved the Theater’s spotlight system dramatically.",
    "One star performer declared the Theater as the best stage they’ve used.",
    "No equipment malfunctioned, leaving the Theater’s show flawless.",
    "Posters in the Theater hall generated excitement about upcoming plays."
  ],
  "Training Area": [
    "A well-run drill in the Training Area boosted everyone’s confidence.",
    "No injuries were reported despite rigorous workouts in the Training Area.",
    "A traveling champion gave free pointers in the Training Area.",
    "New training dummies in the Training Area held up perfectly under assault.",
    "The Training Area’s padded mats prevented any bruises or sprains.",
    "Everyone left the Training Area feeling stronger than before.",
    "A short sparring tournament ended in mutual respect and no grudges.",
    "The Training Area’s air circulation kept it from becoming stuffy.",
    "Weapons used in training were all in safe, working condition.",
    "A sense of friendly competition pervaded the Training Area today.",
    "No equipment was misplaced in the Training Area, saving time.",
    "Diverse music tracks inspired trainees to reach new personal bests.",
    "Several novices advanced quickly due to focused sessions here.",
    "Enthusiasm soared as the Training Area introduced a new warm-up routine.",
    "Water pitchers in the Training Area stayed replenished, avoiding dehydration."
  ],
  "Trophy Room": [
    "A newly polished beast skull in the Trophy Room impressed onlookers.",
    "Stories behind the Trophy Room’s displays fascinated new defenders.",
    "No dust settled on the Trophy Room’s shelves overnight, oddly enough.",
    "A caretaker discovered an old plaque detailing a heroic deed among trophies.",
    "Visitors admired a legendary weapon on display, stoking Bastion pride.",
    "A faint aura of respect fills the Trophy Room, acknowledging past victories.",
    "A recently mounted trophy piece was revealed, capturing everyone’s attention.",
    "A traveling bard wrote a ballad about the exploits in this Trophy Room.",
    "Someone placed subtle lighting to highlight each trophy’s best angle.",
    "Guards felt renewed resolve seeing the Bastion’s achievements lined up.",
    "A hidden compartment in a trophy stand contained a small good-luck charm.",
    "No disputes erupted over credit for trophies—everyone is at peace.",
    "A child touring the Trophy Room vowed to become a hero one day.",
    "A bright polish on the mounted shields made them shine like new.",
    "A small plaque was corrected to properly honor the rightful hero."
  ],
  "War Room": [
    "Strategic maps in the War Room were updated, clarifying terrain intel.",
    "Officers in the War Room collaborated smoothly, no arguments at all.",
    "A quick war simulation in the War Room revealed no glaring weaknesses.",
    "The War Room’s table was refinished, sliding pieces easily on its surface.",
    "A famous veteran passing by complimented the War Room’s readiness.",
    "A newly recruited lieutenant contributed keen insights in the War Room.",
    "The War Room’s walls now bear motivational banners, boosting morale.",
    "A re-check of supply lines in the War Room confirmed enough provisions.",
    "No infiltration attempts threatened the War Room’s confidentiality.",
    "Tactical figurines in the War Room were reorganized for clarity.",
    "Everyone left the War Room feeling more prepared and united.",
    "A local cartographer donated updated region maps to the War Room.",
    "A messenger delivered encouraging news from allied forces, shared in the War Room.",
    "Commanders practiced a new formation strategy with encouraging results.",
    "Discussions ended in consensus, leaving the War Room dynamic and effective."
  ],
  "Workshop": [
    "The Workshop’s artisans completed a tricky project without error.",
    "No tools broke or jammed in the Workshop, an unexpected boon.",
    "A creative solution in the Workshop fixed a longstanding design flaw.",
    "Sunlight from a window brightened the Workshop, aiding detail work.",
    "A master artisan gave a free demonstration, enthralling novices.",
    "Neatly organized tools in the Workshop sped up every task.",
    "Someone donated a small crate of quality wood for the Workshop’s use.",
    "A broken lathe was fixed in the Workshop, now functioning perfectly.",
    "The Workshop’s new paint job inspires craftspeople to innovate.",
    "No splinters or accidental cuts were reported among the workers today.",
    "Ventilation in the Workshop improved, keeping dust levels low.",
    "A traveling gnome left behind some cunning mechanical designs.",
    "A stable worktable prevented all the usual wobbles and mishaps.",
    "Freshly sharpened chisels in the Workshop made carving a breeze.",
    "An apprentice’s first project in the Workshop turned out surprisingly well."
  ]
};

/* Bastion class (main manager). */
class Bastion {
  constructor(ownerName, bastionName, ownerLevel) {
    this.ownerName = ownerName;
    this.bastionName = bastionName;
    this.ownerLevel = ownerLevel;
    this.finance = 0;
    this.defenders = 0;
    this.basicFacilities = [];
    this.specialFacilities = [];
    this.otherStats = { totalDaysPassed: 0 };
    this.turnCount = 0;
    this.ownerPrereqs = {
      canUseArcaneFocus: false,
      canUseHolySymbol: false,
      hasFightingStyle: false,
      hasExpertise: false,
    };
  }

  /* Advance 1 Bastion turn (7 days). */
  nextTurn() {
    this.turnCount++;
    this.otherStats.totalDaysPassed += 7;
    this.specialFacilities.forEach(f => {
      f.orderUsedThisTurn = false;
      if (f.enlargeInProgress) {
        f.enlargeTimeRemaining = Math.max(0, f.enlargeTimeRemaining - 7);
        if (f.enlargeTimeRemaining <= 0) {
          f.enlargeInProgress = false;
          if (f.space === "Cramped") f.space = "Roomy";
          else if (f.space === "Roomy") f.space = "Vast";
        }
      }
      if (f.charmCooldown > 0) {
        f.charmCooldown = Math.max(0, f.charmCooldown - 7);
      }
    });
    this.basicFacilities.forEach(bf => {
      if (bf.enlargeInProgress) {
        bf.enlargeTimeRemaining = Math.max(0, bf.enlargeTimeRemaining - 7);
        if (bf.enlargeTimeRemaining <= 0) {
          bf.enlargeInProgress = false;
          if (bf.space === "Cramped") bf.space = "Roomy";
          else if (bf.space === "Roomy") bf.space = "Vast";
        }
      }
    });
  }

  /* Remove a facility by name or type. */
  removeFacility(identifier) {
    this.basicFacilities = this.basicFacilities.filter(b => b.facilityType !== identifier);
    this.specialFacilities = this.specialFacilities.filter(s => s.name !== identifier);
  }

  /* Trigger a random event from the EVENT_TABLE. */
  maintainAndTriggerEvent() {
    const roll = Math.floor(Math.random() * 100) + 1;
    const entry = EVENT_TABLE.find(e => roll >= e.rollMin && roll <= e.rollMax);
    if (!entry) return "All Is Well (no matching event).";
    return this[entry.method]();
  }

  /* handleAllIsWell: now references existing facilities and returns 1-3 random messages about them. */
  handleAllIsWell() {
    // Gather the names of all existing facilities in the Bastion:
    // Basic ones use "bf.facilityType", special ones use "sf.name".
    const existingFacilityNames = this.basicFacilities.map(b => b.facilityType).concat(
      this.specialFacilities.map(s => s.name)
    );

    if (!existingFacilityNames.length) {
      // No facilities at all, return a simple fallback.
      return "All Is Well: No facilities are built yet, so there's not much to report.";
    }

    // We'll randomly choose 1 to 3 facility references. 
    // If there are fewer than 3, we only pick from the ones that exist.
    let numMessages = Math.floor(Math.random() * 3) + 1; // 1 to 3
    if (numMessages > existingFacilityNames.length) {
      numMessages = existingFacilityNames.length;
    }

    // We'll copy the array so we can remove or pick from it:
    let facilityPool = [...existingFacilityNames];
    let selectedMessages = [];

    for (let i = 0; i < numMessages; i++) {
      // If the pool is empty, break:
      if (!facilityPool.length) break;
      // Pick a random facility from facilityPool:
      const idx = Math.floor(Math.random() * facilityPool.length);
      const facilityName = facilityPool[idx];
      // Retrieve up to 15 messages from FACILITY_ALL_IS_WELL_MESSAGES:
      const messages = FACILITY_ALL_IS_WELL_MESSAGES[facilityName] || null;

      if (messages && messages.length) {
        // Pick one random message from that array:
        const mIdx = Math.floor(Math.random() * messages.length);
        selectedMessages.push(messages[mIdx]);
      } else {
        // If no messages for this facility, skip
        selectedMessages.push(`The facility "${facilityName}" is calm and trouble-free today.`);
      }

      // Remove that facility from the pool so we don't pick it again this time:
      facilityPool.splice(idx, 1);
    }

    // Combine them into a single "All Is Well" output:
    let output = "All Is Well:";
    selectedMessages.forEach(msg => {
      output += " " + msg;
    });
    return output;
  }

  handleAttack() {
    let defendersLost = 0;
    for (let i = 0; i < 6; i++) {
      if (Math.floor(Math.random() * 6) + 1 === 1) defendersLost++;
    }
    this.defenders = Math.max(0, this.defenders - defendersLost);
    let msg = `Attack! 6d6 were rolled, losing ${defendersLost} defenders.`;
    if (this.defenders <= 0 && this.specialFacilities.length > 0) {
      const idx = Math.floor(Math.random() * this.specialFacilities.length);
      this.specialFacilities[idx].shutDownNextTurn = true;
      msg += ` All defenders gone; ${this.specialFacilities[idx].name} is damaged.`;
    }
    return msg;
  }

  handleCriminalHireling() {
    const d6 = Math.floor(Math.random() * 6) + 1;
    const cost = d6 * 100;
    if (this.finance >= cost) {
      this.finance -= cost;
      return `Criminal Hireling discovered. Paid ${formatGold(cost)} GP bribe to keep them.`;
    } else {
      return `Criminal Hireling discovered. Insufficient funds (${formatGold(cost)} GP) for bribe; they were arrested and removed.`;
    }
  }
  handleExtraordinaryOpportunity() {
    if (this.finance >= 500) {
      this.finance -= 500;
      let secondEvt = this.handleAllIsWell();
      return `Paid ${formatGold(500)} GP to seize an Extraordinary Opportunity. Additional effect: ${secondEvt}`;
    } else {
      return `Extraordinary Opportunity requires 500 GP, but you lack the funds.`;
    }
  }
  handleFriendlyVisitors() {
    const d6 = Math.floor(Math.random() * 6) + 1;
    const gold = d6 * 100;
    this.finance += gold;
    let usedFacility = this.specialFacilities.length
      ? this.specialFacilities[Math.floor(Math.random() * this.specialFacilities.length)].name
      : "No special facility found";
    return `Friendly Visitors used ${usedFacility}, paying ${formatGold(gold)} GP.`;
  }
  handleGuest() {
    const roll = Math.floor(Math.random() * 4) + 1;
    if (roll === 1) {
      return "A famous bard visited, leaving a letter of recommendation.";
    } else if (roll === 2) {
      const d6 = Math.floor(Math.random() * 6) + 1;
      const gold = d6 * 100;
      this.finance += gold;
      return `A guest sought sanctuary, left a gift of ${formatGold(gold)} GP.`;
    } else if (roll === 3) {
      this.defenders += 2;
      return "A pair of mercenaries joined, increasing defenders by 2.";
    } else {
      return "A friendly creature is visiting. It will prevent your next Attack's defender losses once.";
    }
  }
  handleLostHirelings() {
    if (!this.specialFacilities.length) {
      return "Lost Hirelings event, but no special facilities to affect.";
    }
    const idx = Math.floor(Math.random() * this.specialFacilities.length);
    this.specialFacilities[idx].shutDownNextTurn = true;
    return `Hirelings at ${this.specialFacilities[idx].name} vanished; it shuts down next turn.`;
  }
  handleMagicalDiscovery() {
    return "Magical Discovery: You gained an Uncommon potion/scroll for free.";
  }
  handleRefugees() {
    const d4_1 = Math.floor(Math.random() * 4) + 1;
    const d4_2 = Math.floor(Math.random() * 4) + 1;
    const groupSize = d4_1 + d4_2;
    const d6 = Math.floor(Math.random() * 6) + 1;
    const gold = d6 * 100;
    this.finance += gold;
    return `Refugees: ${groupSize} arrived, paying ${formatGold(gold)} GP for sanctuary.`;
  }
  handleRequestForAid() {
    const defendersSent = Math.floor(this.defenders / 2);
    if (!defendersSent) return "Request for Aid ignored: no defenders to spare.";
    let total = 0;
    for (let i = 0; i < defendersSent; i++) {
      total += Math.floor(Math.random() * 6) + 1;
    }
    if (total >= 10) {
      const d6 = Math.floor(Math.random() * 6) + 1;
      const reward = d6 * 100;
      this.finance += reward;
      return `Sent ${defendersSent} defenders. Rolled ${total} >= 10 => success! Gained ${formatGold(reward)} GP.`;
    } else {
      const d6 = Math.floor(Math.random() * 6) + 1;
      const half = (d6 * 100) / 2;
      this.defenders = Math.max(0, this.defenders - 1);
      this.finance += half;
      return `Sent ${defendersSent} defenders. Rolled ${total} < 10 => partial success; gained ${formatGold(half)} GP, lost 1 defender.`;
    }
  }
  handleTreasure() {
    const roll = Math.floor(Math.random() * 100) + 1;
    let result = "";
    let detail = "";
    if (roll <= 40) {
      result = "25 GP art object";
      detail = this.rollOnTable("25 GP Art Objects");
    } else if (roll <= 63) {
      result = "250 GP art object";
      detail = this.rollOnTable("250 GP Art Objects");
    } else if (roll <= 73) {
      result = "750 GP art object";
      detail = this.rollOnTable("750 GP Art Objects");
    } else if (roll <= 75) {
      result = "2,500 GP art object";
      detail = this.rollOnTable("2,500 GP Art Objects");
    } else if (roll <= 90) {
      result = "Common Magic Items (4 options)";
      detail = this.rollMagicItems("Common", 4);
    } else if (roll <= 98) {
      result = "Uncommon Magic Items (4 options)";
      detail = this.rollMagicItems("Uncommon", 4);
    } else {
      result = "Rare Magic Items (4 options)";
      detail = this.rollMagicItems("Rare", 4);
    }
    return `Treasure found: ${result} (roll ${roll}). <li>${detail}`;
  }
  rollOnTable(tableName) {
    // Provide or load your own tables. Example partial placeholder:
    const tables = {
      "25 GP Art Objects": [
        "Silver ewer",
        "Carved bone statuette",
        "Gold bracelet",
        "Cloth-of-gold vestments",
        "Black velvet mask stitched with silver thread",
        "Copper chalice with silver filigree",
        "Pair of engraved bone dice",
        "Handheld mirror set in a painted wooden frame",
        "Embroidered silk handkerchief",
        "Gold locket with a painted portrait inside"
      ],
      "250 GP Art Objects": [
        "Gold ring set with bloodstones",
        "Carved ivory statuette",
        "Bejeweled gold bracelet",
        "Silver necklace with a gemstone pendant",
        "Bronze crown",
        "Silk vestments with gold embroidery",
        "Well-made tapestry (10 ft x 10 ft)",
        "Brass mug with jade inlay",
        "Box of turquoise animal figurines",
        "Gold birdcage with electrum filigree"
      ],
      "750 GP Art Objects": [
        "Silver chalice set with moonstones",
        "Bundle of lost dirges from a famous composer",
        "Carved wooden harp with ivory inlay and zircon gems",
        "Gold idol",
        "Gold comb shaped like a dragon with red garnets for eyes",
        "Bottle stopper cork embossed with gold leaf and set with amethysts",
        "Life-sized dragonborn skull cast in electrum",
        "Silver and gold brooch",
        "Obsidian statuette with gold fittings and inlay",
        "Painted gold war mask"
      ],
      "2,500 GP Art Objects": [
        "Fine gold chain set with a fire opal",
        "Old masterpiece painting",
        "Embroidered silk mantle set with numerous moonstones",
        "Platinum bracelet set with an emerald",
        "Embroidered glove set with jewel chips",
        "Jeweled anklet",
        "Gold music box",
        "Gold circlet set with aquamarines",
        "Eye patch with blue sapphires and moonstones",
        "A necklace string of small pink pearls"
      ]
    };
    const table = tables[tableName];
    if (!table) return "No table found.";
    const itemRoll = Math.floor(Math.random() * table.length);
    return table[itemRoll];
  }
  rollMagicItems(rarity, count = 1) {
    // Example placeholders:
    const exampleList = [
      `${rarity} Magic Item #1`,
      `${rarity} Magic Item #2`,
      `${rarity} Magic Item #3`,
      `${rarity} Magic Item #4`,
      `${rarity} Magic Item #5`
    ];
    let results = [];
    for (let i = 0; i < count; i++) {
      let idx = Math.floor(Math.random() * exampleList.length);
      results.push(exampleList[idx]);
    }
    return results.join(", ");
  }
}

/* A single global Bastion reference. */
let currentBastion = null;

/* Initialize a default Bastion with example data. */
function initializeBastion() {
  currentBastion = new Bastion("Adventurer", "My Bastion", 5);
  currentBastion.finance = 2000;
  currentBastion.defenders = 10;

  const kitchenDef = BASIC_FACILITIES_DEFINITIONS.find(d => d.facilityType === "Kitchen");
  const b1 = new BasicFacility(kitchenDef, "Roomy");
  currentBastion.basicFacilities.push(b1);

  const firstSpecialDef = SPECIAL_FACILITIES_FULL[0];
  if (firstSpecialDef) {
    const s1 = new SpecialFacility(firstSpecialDef, "Roomy");
    currentBastion.specialFacilities.push(s1);
  }

  updateUI();
  updateSpecialFacilityDropdown();
  updateOrderFacilityDropdown();
}

/* Update the main display of Bastion info. */
function updateUI() {
  if (!currentBastion) return;
  const infoDiv = document.getElementById("bastion-info-container");
  const { ownerName, bastionName, ownerLevel, finance, defenders, turnCount, otherStats } = currentBastion;

  let anniMsg = "";
  if (otherStats.totalDaysPassed && otherStats.totalDaysPassed % 365 === 0) {
    let years = otherStats.totalDaysPassed / 365;
    anniMsg = `<p><strong>It's been ${years} year(s) since founding!</strong></p>`;
  }
  infoDiv.innerHTML = `
    <p><strong>Owner:</strong> ${ownerName}</p>
    <p><strong>Bastion:</strong> ${bastionName}</p>
    <p><strong>Level:</strong> ${ownerLevel}</p>
    <p><strong>Defenders:</strong> ${defenders}</p>
    <p><strong>Turn:</strong> ${turnCount}</p>
    <p><strong>Days Passed:</strong> ${otherStats.totalDaysPassed}</p>
    ${anniMsg}
  `;

  document.getElementById("ownerNameInput").value = ownerName;
  document.getElementById("bastionNameInput").value = bastionName;
  document.getElementById("ownerLevelInput").value = ownerLevel;
  document.getElementById("canUseArcaneFocus").checked = currentBastion.ownerPrereqs.canUseArcaneFocus;
  document.getElementById("canUseHolySymbol").checked = currentBastion.ownerPrereqs.canUseHolySymbol;
  document.getElementById("hasFightingStyle").checked = currentBastion.ownerPrereqs.hasFightingStyle;
  document.getElementById("hasExpertise").checked = currentBastion.ownerPrereqs.hasExpertise;

  document.getElementById("finances-info").textContent = `Current Gold: ${formatGold(finance)} GP`;

  const facListDiv = document.getElementById("facilities-list");
  let basicHTML = "<ul>";
  currentBastion.basicFacilities.forEach(bf => {
    let enlargeNote = bf.enlargeInProgress ? ` (Enlarging: ${bf.enlargeTimeRemaining} days left)` : "";
    basicHTML += `
      <li>
        <strong>${bf.facilityType}</strong> (Space: ${bf.space})${enlargeNote}
        <div class="facility-description" style="margin:0.25rem 0;">${bf.description}</div>
        <button onclick="startBasicEnlargement('${bf.facilityType}')">Enlarge</button>
        <button onclick="removeFacility('${bf.facilityType}')">Remove</button>
      </li>`;
  });
  basicHTML += "</ul>";

  let specialHTML = "<ul>";
  currentBastion.specialFacilities.forEach(sf => {
    let enlargeNote = sf.enlargeInProgress ? ` (Enlarging: ${sf.enlargeTimeRemaining} days left)` : "";
    let shutMsg = sf.shutDownNextTurn ? " (Shut next turn)" : "";
    let usedMsg = sf.orderUsedThisTurn ? " [Order used]" : "";
    specialHTML += `
      <li>
        <strong>${sf.name}</strong> (Space: ${sf.space})${shutMsg}${enlargeNote}${usedMsg}
        <div class="facility-description" style="margin:0.25rem 0;">${sf.description}</div>
        <button onclick="startSpecialEnlargement('${sf.name}')">Enlarge</button>
        <button onclick="removeFacility('${sf.name}')">Remove</button>
      </li>
    `;
  });
  specialHTML += "</ul>";

  facListDiv.innerHTML = `
    <h3>Basic</h3>
    ${basicHTML}
    <h3>Special</h3>
    ${specialHTML}
  `;
}

/* Refresh special facility dropdown to only show those the Bastion qualifies for. */
function updateSpecialFacilityDropdown() {
  if (!currentBastion) return;
  const sfSel = document.getElementById("specialFacilitySelect");
  sfSel.innerHTML = "";
  SPECIAL_FACILITIES_FULL.forEach(def => {
    if (currentBastion.ownerLevel < def.levelReq) return;

    // Check broad prerequisite strings (ArcaneFocus, HolySymbol, etc.).
    if (def.prereq === "Ability to use an Arcane Focus or tool as a Spellcasting Focus" 
        && !currentBastion.ownerPrereqs.canUseArcaneFocus) return;
    if (def.prereq === "Ability to use a Holy Symbol or Druidic Focus as a Spellcasting Focus" 
        && !currentBastion.ownerPrereqs.canUseHolySymbol) return;
    if (def.prereq === "Fighting Style feature or Unarmored Defense feature" 
        && !currentBastion.ownerPrereqs.hasFightingStyle) return;
    if (def.prereq === "Expertise in a skill" 
        && !currentBastion.ownerPrereqs.hasExpertise) return;

    let opt = document.createElement("option");
    opt.value = def.name;
    opt.textContent = `${def.name} (Lv ${def.levelReq})`;
    sfSel.appendChild(opt);
  });
}

/* Populate the facility in the “Orders” dropdown. */
function updateOrderFacilityDropdown() {
  if (!currentBastion) return;
  const facSel = document.getElementById("facilityOrderSelect");
  facSel.innerHTML = "";
  currentBastion.specialFacilities.forEach(sf => {
    let opt = document.createElement("option");
    opt.value = sf.name;
    opt.textContent = sf.name;
    facSel.appendChild(opt);
  });
  updateOrdersForSelectedFacility();
}

/* After picking a special facility in the orders UI, fill the second dropdown with possible orders. */
function updateOrdersForSelectedFacility() {
  const orderSel = document.getElementById("orderTypeSelect");
  orderSel.innerHTML = "";
  const facSelVal = document.getElementById("facilityOrderSelect").value;
  if (!facSelVal) return;
  const facility = currentBastion.specialFacilities.find(sf => sf.name === facSelVal);
  if (!facility) return;
  facility.possibleOrders.forEach(o => {
    let opt = document.createElement("option");
    opt.value = o;
    opt.textContent = o;
    orderSel.appendChild(opt);
  });
}

/* Start enlargement on a basic facility. */
window.startBasicEnlargement = function(typeName) {
  if (!currentBastion) return;
  const bf = currentBastion.basicFacilities.find(b => b.facilityType === typeName);
  if (!bf) return;
  if (bf.enlargeInProgress) {
    logEvent(`Enlargement already in progress for ${bf.facilityType}.`);
    return;
  }
  if (bf.space === "Vast") {
    logEvent(`${bf.facilityType} is already Vast, cannot enlarge further.`);
    return;
  }
  const nextSize = (bf.space === "Cramped") ? "Roomy" : "Vast";
  const path = `${bf.space}->${nextSize}`;
  const defObj = BASIC_FACILITIES_DEFINITIONS.find(d => d.facilityType === bf.facilityType);
  if (!defObj || !defObj.enlargeCosts) {
    logEvent(`No enlarge cost defined for ${bf.facilityType}.`);
    return;
  }
  const cost = defObj.enlargeCosts[path];
  if (!cost) {
    logEvent(`No valid enlarge cost for ${bf.facilityType} going from ${bf.space} to ${nextSize}.`);
    return;
  }
  let enlargeTime = 25; 
  if (bf.space === "Roomy") enlargeTime = 80; 
  if (defObj.enlargeTimes && defObj.enlargeTimes[path]) {
    enlargeTime = defObj.enlargeTimes[path];
  }
  if (currentBastion.finance < cost) {
    logEvent(`Not enough gold to enlarge ${bf.facilityType}. Need ${formatGold(cost)} GP.`);
    return;
  }
  currentBastion.finance -= cost;
  bf.enlargeInProgress = true;
  bf.enlargeTimeRemaining = enlargeTime;
  logEvent(`Enlarging ${bf.facilityType} from ${bf.space} -> ${nextSize}. Paid ${formatGold(cost)} GP. Will complete in ~${enlargeTime} days.`);
  updateUI();
};

/* Start enlargement on a special facility. */
window.startSpecialEnlargement = function(facName) {
  if (!currentBastion) return;
  const sf = currentBastion.specialFacilities.find(s => s.name === facName);
  if (!sf) return;
  if (!sf.canEnlarge) {
    logEvent(`${sf.name} cannot be enlarged by its rules.`);
    return;
  }
  if (sf.enlargeInProgress) {
    logEvent(`Enlargement already in progress for ${sf.name}.`);
    return;
  }
  if (sf.space === "Vast") {
    logEvent(`${sf.name} is already Vast, cannot enlarge further.`);
    return;
  }
  const nextSize = (sf.space === "Cramped") ? "Roomy" : "Vast";
  const path = `${sf.space}->${nextSize}`;
  if (!sf.defObj.enlargeCosts) {
    logEvent(`${sf.name} has no enlargeCosts defined, cannot enlarge.`);
    return;
  }
  const cost = sf.defObj.enlargeCosts[path];
  if (!cost) {
    logEvent(`No valid enlarge cost for ${sf.name} going from ${sf.space} to ${nextSize}.`);
    return;
  }
  let enlargeTime = 25; 
  if (sf.space === "Roomy") enlargeTime = 80; 
  if (sf.defObj.enlargeTimes && sf.defObj.enlargeTimes[path]) {
    enlargeTime = sf.defObj.enlargeTimes[path];
  }
  if (currentBastion.finance < cost) {
    logEvent(`Not enough gold to enlarge ${sf.name}. Need ${formatGold(cost)} GP.`);
    return;
  }
  currentBastion.finance -= cost;
  sf.enlargeInProgress = true;
  sf.enlargeTimeRemaining = enlargeTime;
  logEvent(`Enlarging ${sf.name} from ${sf.space} -> ${nextSize}. Paid ${formatGold(cost)} GP. Will complete in ~${enlargeTime} days.`);
  updateUI();
};

/* Remove a facility from the Bastion. */
window.removeFacility = function(ident) {
  if (!currentBastion) return;
  currentBastion.removeFacility(ident);
  logEvent(`Removed facility: ${ident}`);
  updateUI();
  updateOrderFacilityDropdown();
};

/* Add a Basic Facility (using default space from the definition). */
window.handleAddBasicFacility = function() {
  if (!currentBastion) return;
  const typeVal = document.getElementById("basicFacilityType").value;
  const defObj = BASIC_FACILITIES_DEFINITIONS.find(d => d.facilityType === typeVal);
  if (!defObj) {
    logEvent(`No definition found for basic facility type: ${typeVal}`);
    return;
  }
  const bf = new BasicFacility(defObj, undefined);
  currentBastion.basicFacilities.push(bf);
  logEvent(`Added Basic Facility: (defaultSpace) ${typeVal}<br>${bf.description}`);
  updateUI();
};

/* Add a Special Facility (using default space from the definition). */
window.handleAddSpecialFacility = function() {
  if (!currentBastion) return;
  const nameSel = document.getElementById("specialFacilitySelect").value;
  const def = SPECIAL_FACILITIES_FULL.find(d => d.name === nameSel);
  if (!def) {
    logEvent("No definition found or missing prereq for that special facility.");
    return;
  }
  const sf = new SpecialFacility(def, undefined);
  currentBastion.specialFacilities.push(sf);
  logEvent(`Added Special Facility: ${nameSel} (defaultSpace)<br>${sf.description}`);
  updateUI();
  updateOrderFacilityDropdown();
};

/* Issue an order to a special facility. */
window.issueOrder = function() {
  if (!currentBastion) return;
  const facName = document.getElementById("facilityOrderSelect").value;
  const orderVal = document.getElementById("orderTypeSelect").value;
  if (!facName || !orderVal) return;
  const sf = currentBastion.specialFacilities.find(s => s.name === facName);
  if (!sf) {
    document.getElementById("orderResult").textContent = "No such special facility.";
    return;
  }
  if (sf.orderUsedThisTurn) {
    document.getElementById("orderResult").textContent = `${sf.name} has already used an order this turn.`;
    return;
  }
  if (sf.shutDownNextTurn) {
    document.getElementById("orderResult").textContent = `${sf.name} is shut down, cannot take orders.`;
    return;
  }
  let resultText = handleFacilityOrder(sf, orderVal);
  sf.orderUsedThisTurn = true;
  document.getElementById("orderResult").innerHTML = resultText;
  logEvent(`Order: ${sf.name} (${orderVal}) => ${resultText}`);
  updateUI();
};

/* This function reads subOrders from the facility definition and returns a textual effect. */
function handleFacilityOrder(sf, order) {
  const baseOrder = order; 
  let result = "";
  let genericMsg = `<strong>${sf.name} performed a ${baseOrder} order.</strong> 7 days pass. Refer to facility description for outcome.`;

  switch (sf.name) {
    case "Aviary":
      if (baseOrder === "Recruit") {
        result = `Training an Avian Friend takes 7 days. You can now send "Aerial Orders" via your trained companion.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Arcane Study":
      if (baseOrder === "Craft") {
        result = `The Arcane Study's hireling crafts (Focus/Book/Magic Item) over ~7 days. Costs vary; see facility details.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Archive":
      if (baseOrder === "Research") {
        result = `The Archive hireling spends 7 days researching. You gain <em>Legend Lore</em>-style info.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Armory":
      if (baseOrder === "Trade") {
        result = `Armory is stocked in 7 days. Costs 100 GP + 100 GP/Defender (halved if Smithy present). Roll d8 instead of d6 when attacked.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Barrack":
      if (baseOrder === "Recruit") {
        result = `You recruit up to four new Bastion Defenders in 7 days at no cost (if space remains).`;
      } else {
        result = genericMsg;
      }
      break;
    case "Demiplane":
      if (baseOrder === "Empower") {
        result = `Arcane Resilience runes appear for 7 days. After a Long Rest in the Demiplane, gain Temp HP = 5 x your level.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Gaming Hall":
      if (baseOrder === "Trade") {
        result = `The Gaming Hall runs a gambling den for 7 days. Roll 1d100 for winnings or see randomEffects.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Garden":
      if (baseOrder === "Harvest") {
        result = `Garden is harvested over 7 days. Output depends on Garden type (Decorative, Food, Herb, Poison).`;
      } else {
        result = genericMsg;
      }
      break;
    case "Greenhouse":
      if (baseOrder === "Harvest") {
        result = `Greenhouse yields either a free Potion of Healing (greater) or a Poison type in 7 days. Fruit of Restoration also available daily.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Guildhall":
      if (baseOrder === "Recruit") {
        result = `Guild members do a special assignment (Adventurers, Bakers, etc.) in 7+ days, offering unique rewards.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Laboratory":
      if (baseOrder === "Craft") {
        result = `Lab crafts alchemical supplies or certain poisons in 7 days, half the usual poison cost.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Library":
      if (baseOrder === "Research") {
        result = `Library hireling researches a topic for 7 days, discovering up to three pieces of new information.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Meditation Chamber":
      if (baseOrder === "Empower") {
        result = `Inner Peace: next Bastion event, roll twice. Also consider "Fortify Self" downtime for random saving throws.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Menagerie":
      if (baseOrder === "Recruit") {
        result = `Menagerie hirelings spend 7 days acquiring a creature; costs vary by CR. Creatures can defend or remain neutral.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Observatory":
      if (baseOrder === "Empower") {
        result = `Eldritch Discovery: 7 nights of star-gazing. Odd roll yields a random Charm (Darkvision, Heroism, or Vitality).`;
      } else {
        result = genericMsg;
      }
      break;
    case "Pub":
      if (baseOrder === "Research") {
        result = `Information Gathering: 7 days. The bartender's spies locate known creatures within 50 miles if unhidden by magic.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Reliquary":
      if (baseOrder === "Harvest") {
        result = `Hireling prepares a Talisman in 7 days, substituting for up to 1,000 GP in consumed spell components once.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Sacristy":
      if (baseOrder === "Craft") {
        result = `Create Holy Water (7 days, optionally pay GP for bonus damage) or craft a Common/Uncommon Relic.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Sanctuary":
      if (baseOrder === "Craft") {
        result = `Hireling creates a Druidic Focus or Holy Symbol in 7 days at no cost. Gain a weekly Healing Word charm.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Sanctum":
      if (baseOrder === "Empower") {
        result = `Fortifying Rites: 7 days, each long rest gives Temp HP = your level for 7 days. Also have Word of Recall to Sanctum.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Scriptorium":
      if (baseOrder === "Craft") {
        result = `Scriptorium can copy a book in 7 days, scribe a Spell Scroll, or produce up to 50 pamphlets.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Smithy":
      if (baseOrder === "Craft") {
        result = `Smithy can craft mundane items or a Common/Uncommon Armament (lvl 9+). 7+ days plus crafting cost.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Stable":
      if (baseOrder === "Trade") {
        result = `Stable can buy or sell mounts in 7 days. Profit margin improves with your level.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Storehouse":
      if (baseOrder === "Trade") {
        result = `Storehouse can buy or sell up to 500 GP of goods (scales with level) in 7 days, with markup 10%-100%.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Teleportation Circle":
      if (baseOrder === "Recruit") {
        result = `Invite a Friendly NPC spellcaster (roll odd/even). Even means they arrive for 14 days and can cast up to 4th-level spells.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Theater":
      if (baseOrder === "Empower") {
        result = `After 14 days rehearsal and 7+ days performance, each contributor who passes DC 15 Performance gains a Theater die.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Training Area":
      if (baseOrder === "Empower") {
        result = `Training exercises over 7 days. Participants gain a 7-day benefit depending on the trainer type (Battle, Skills, etc.).`;
      } else {
        result = genericMsg;
      }
      break;
    case "Trophy Room":
      if (baseOrder === "Research") {
        result = `7 days of research reveals 3 new pieces of lore or you can attempt a Trinket Trophy roll for a Common item on even roll.`;
      } else {
        result = genericMsg;
      }
      break;
    case "War Room":
      if (baseOrder === "Recruit") {
        result = `Recruit a new Veteran lieutenant (max 10) or muster up to 100 Guards per lieutenant. Costs 1 GP/day each.`;
      } else {
        result = genericMsg;
      }
      break;
    case "Workshop":
      if (baseOrder === "Craft") {
        result = `Workshop crafts mundane gear or a Common/Uncommon Implement (lvl 9+). Also grants Heroic Inspiration once per Short Rest.`;
      } else {
        result = genericMsg;
      }
      break;
    default:
      result = genericMsg;
      break;
  }
  return result;
}

/* Next Turn button: progress time and run a random event. */
window.handleNextTurn = function() {
  if (!currentBastion) return;
  currentBastion.nextTurn();
  let shutting = currentBastion.specialFacilities.filter(f => f.shutDownNextTurn);
  shutting.forEach(f => {
    logEvent(`${f.name} is offline this turn due to damage. It is repaired afterward.`);
    f.shutDownNextTurn = false;
  });
  let eventText = currentBastion.maintainAndTriggerEvent();
  logEvent(`Turn ${currentBastion.turnCount}: ${eventText}`);
  updateUI();
};

/* Update Bastion details from user input. */
window.updatePlayerInfo = function() {
  if (!currentBastion) return;
  const newName = document.getElementById("ownerNameInput").value;
  const newBName = document.getElementById("bastionNameInput").value;
  const newLevel = parseInt(document.getElementById("ownerLevelInput").value, 10);
  currentBastion.ownerName = newName;
  currentBastion.bastionName = newBName;
  currentBastion.ownerLevel = isNaN(newLevel) ? currentBastion.ownerLevel : newLevel;

  currentBastion.ownerPrereqs.canUseArcaneFocus = document.getElementById("canUseArcaneFocus").checked;
  currentBastion.ownerPrereqs.canUseHolySymbol = document.getElementById("canUseHolySymbol").checked;
  currentBastion.ownerPrereqs.hasFightingStyle = document.getElementById("hasFightingStyle").checked;
  currentBastion.ownerPrereqs.hasExpertise = document.getElementById("hasExpertise").checked;

  logEvent(`Updated Info: Name=${newName}, Bastion=${newBName}, Level=${currentBastion.ownerLevel}`);
  updateUI();
  updateSpecialFacilityDropdown();
  updateOrderFacilityDropdown();
};

/* Finance operations. */
window.handleAddMoney = function() {
  if (!currentBastion) return;
  const amt = parseInt(document.getElementById("financeChange").value, 10);
  if (amt > 0) {
    currentBastion.finance += amt;
    logEvent(`Added ${formatGold(amt)} GP.`);
    updateUI();
  }
};
window.handleRemoveMoney = function() {
  if (!currentBastion) return;
  const amt = parseInt(document.getElementById("financeChange").value, 10);
  if (amt > 0 && currentBastion.finance >= amt) {
    currentBastion.finance -= amt;
    logEvent(`Removed ${formatGold(amt)} GP.`);
    updateUI();
  } else {
    logEvent(`Insufficient funds or invalid removal: ${formatGold(amt)} GP.`);
  }
};

/* Logs new events at the top of the event log. */
function logEvent(message) {
  const logDiv = document.getElementById("event-log");
  const p = document.createElement("p");
  p.innerHTML = message;
  if (logDiv.firstChild) {
    logDiv.insertBefore(p, logDiv.firstChild);
  } else {
    logDiv.appendChild(p);
  }
}

/* Initialize all UI elements on window load. */
function initBastionDescriptionUI() {
  populateBastionDescDropdown();
  populateBastionQuirkDropdown();
  document.getElementById("bastionDescRollBtn").addEventListener("click", handleBastionDescRollOrPick);
  document.getElementById("bastionDescDropdown").addEventListener("change", handleBastionDescDropdownChange);
  document.getElementById("bastionDescApplyCustom").addEventListener("click", handleBastionDescApplyCustom);
  document.getElementById("bastionQuirkRollBtn").addEventListener("click", handleBastionQuirkRollOrPick);
  document.getElementById("bastionQuirkDropdown").addEventListener("change", handleBastionQuirkDropdownChange);
  document.getElementById("bastionQuirkApplyCustom").addEventListener("click", handleBastionQuirkApplyCustom);
  loadBastionDescAndQuirkFromCookie();
}

window.onload = () => {
  initializeBastion();
  document.getElementById("updateInfoBtn").addEventListener("click", updatePlayerInfo);
  document.getElementById("addMoneyBtn").addEventListener("click", handleAddMoney);
  document.getElementById("removeMoneyBtn").addEventListener("click", handleRemoveMoney);
  document.getElementById("addBasicFacilityBtn").addEventListener("click", handleAddBasicFacility);
  document.getElementById("addSpecialFacilityBtn").addEventListener("click", handleAddSpecialFacility);
  document.getElementById("facilityOrderSelect").addEventListener("change", updateOrdersForSelectedFacility);
  document.getElementById("issueOrderBtn").addEventListener("click", issueOrder);
  document.getElementById("nextTurnBtn").addEventListener("click", handleNextTurn);
  initBastionDescriptionUI();
};
### FILE: ./style.css 


/* style.css */

/* Basic reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Times New Roman", serif;
  background-color: #f9f5ea;
  color: #2f1f0b;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

header {
  background-color: #4a3b2c;
  color: #f8f0db;
  padding: 0.8rem 1rem;
  text-align: center;
  border-bottom: 2px solid #2f1f0b;
}

main {
  flex: 1;
  padding: 0.5rem 1rem;
}

/* Collapsibles */
.collapsible {
  border: 1px solid #c2b28f;
  margin-bottom: 0.8rem;
  background-color: #fffaf0;
}

.collapsible-header {
  background-color: #ede2cf;
  padding: 0.4rem;
  font-weight: bold;
  cursor: pointer;
  border-bottom: 1px solid #c2b28f;
  user-select: none;
}

.collapsible-header:hover {
  background-color: #e0d3bc;
}

.collapsible-content {
  padding: 0.6rem;
  display: block;
}

.collapsible[data-collapsed="true"] .collapsible-content {
  display: none;
}

/* Display areas */
.info-display {
  margin-bottom: 0.5rem;
}

/* Form elements */
.info-form,
#basic-facility-section .collapsible-content,
#special-facility-section .collapsible-content {
  display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: stretch;
    /*flex-direction: column;*/
    align-content: flex-start;
    /*justify-content: center;*/
}


label {
  font-weight: bold;
  color: #2f1f0b;
  margin-right: 0.3rem;
}

input[type="text"],
input[type="number"],
select,
textarea {
  padding: 0.2rem 0.4rem;
  border: 1px solid #8a7963;
  background-color: #faf4e8;
  color: #2f1f0b;
  font-family: "Times New Roman", serif;
  border-radius: 2px;
  min-width: 60px;
}

/* Buttons */
button {
  padding: 0.3rem 0.6rem;
  border: 1px solid #8a7963;
  background-color: #dcc9a6;
  color: #2f1f0b;
  cursor: pointer;
  font-family: "Times New Roman", serif;
  border-radius: 2px;
}

button:hover {
  background-color: #c8b397;
}

/* Controls */
#controls {
  margin: 1rem 0;
  display: flex;
  gap: 0.5rem;
}

/* Facilities list */
#facilities-list ul {
  list-style-type: none;
  margin-left: 0.5rem;
}

#facilities-list ul li {
  margin-bottom: 0.4rem;
}

/* Event log */
#event-log {
  max-height: 300px;
  overflow-y: auto;
  border: 1px dashed #c2b28f;
  padding: 0.4rem;
  background-color: #fff;
}

#event-log p {
  margin-bottom: 0.4rem;
}

footer {
  background-color: #4a3b2c;
  color: #f8f0db;
  text-align: center;
  padding: 0.8rem 1rem;
  border-top: 2px solid #2f1f0b;
}
